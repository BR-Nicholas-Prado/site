<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>underWater desert Blogging</title><link>https://caseykuhlman.com/</link><description>A Site About Resilience and Authoritarianism</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>casey@caseykuhlman.com (Casey Kuhlman)</managingEditor><webMaster>casey@caseykuhlman.com (Casey Kuhlman)</webMaster><copyright>All Content Licensed CC BY-NC-SA 4.0</copyright><lastBuildDate>Sat, 09 Mar 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://caseykuhlman.com/tags/thoughts/index.xml" rel="self" type="application/rss+xml"/><item><title>My (Current) Transactional Documents Work Flow</title><link>https://caseykuhlman.com/muniments/2013/2013-03-09-transactional-documents-workflow/</link><pubDate>Sat, 09 Mar 2013 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2013/2013-03-09-transactional-documents-workflow/</guid><description>&lt;p>While it varies, I generally will have two meetings with a client before I will build the initial draft of the contract.&lt;/p>
&lt;p>In the first meeting, I will try to ferret out what the client is trying to achieve. This is generally an overview meeting. Mostly, Somalis do not like doing too much in any one meeting &amp;ndash; especially if they do not know you well. So I try to keep the goals of what I need to achieve in these meetings realistic and limited. During this meeting, I try to give them an idea of in which direction we are likely to take the transaction in terms of what types of contract(s) are going to be involved to facilitate and integrate the transaction. I also usually try to give the client a few of the key, and usually poignant, decisions that they will have to make so that they can mull it over between the first and second meetings.&lt;/p>
&lt;p>In the second meeting, I will ask a lot more specific questions. This meeting is all about the details. Prior to the meeting I will have planned out the transaction documents and forked the appropriate templates of whatever documents will be required for the transaction. I use the specific forks of the primary templates as the basis of my checklist for the transaction. This is easy when building templates in legal_markdown form and sublime. I have been building (but haven't open sourced it yet) a small script that automates this process for me. In my contract templates I just type &lt;code>...?ASK?...&lt;/code> or &lt;code>...?CONFIRM?...&lt;/code> and then the script finds these and builds them into a checklist specific to the transaction.&lt;/p>
&lt;p>I know a lot of transactional attorneys like to build checklists based on the type of transaction. I have a few of those, but I find that usually I spend more time deleting irrelevant items and overall they are inefficient for me. I prefer to build questions into my document templates and then to build my checklist for the transaction based on the document templates that I'm going to use.&lt;/p>
&lt;p>For example, this week I've been working on two different joint venture agreements. They are very different from one another and are based on two different templates (one of which is a fork of the main JV template that I have built). For me, it is more efficient to pull my checklists from each of the templates than it would be to fork a main joint venture checklist and then adapt that for each type of transaction.&lt;/p>
&lt;blockquote>
&lt;p>In other words, the key is to integrate your checklist building with your template building. This has many distinct advantages, not the least of which are precision and efficiency.&lt;/p>
&lt;/blockquote>
&lt;p>The script that builds the checklists for me in sublime produces a list of questions. These provide me with the base the agenda of the second, more detail oriented, meeting with the client. Usually I print the checklist as I find that Somalis usually find a screen in the room either disrespectful or disorienting. So I usually just write my answers on the printed checklist.&lt;/p>
&lt;p>After that second meeting, I build the first drafts of the documents necessary for the transaction. As I said earlier, I build my templates into a main repo and then fork the necessary templates from the main repo into the repo for the client. When I build templates I fill them with mixins, optional clauses, and questions. All I have to do after the second meeting is to fill in the answers to the questions that I have by replacing all the &lt;code>...?QUESTIONS?...&lt;/code> with the answers. Usually this just means filling in the YAML front matter of the template.&lt;/p>
&lt;p>Once I have finished answering the questions, entering the mixins and selecting or deselecting the optional clauses (all of which I do in the YAML front matter), I simply save the legal_markdown file &amp;amp;&amp;amp; pandoc it based on my contract template .odt. Then I open the .odt in libreoffice where I do a final read through of the contract, tweak the styles if necessary, and save as .pdf / .doc / .odt or whatever the client needs to review the document. All of these steps (minus the final review in libreoffice) I perform from sublime. I build the templates there, I massage the YAML front matter there, I pandoc from there, and I open the .odt file from there. It is basically a full scale contracts IDE for me.&lt;/p>
&lt;p>After the client has reviewed the documents I will sometimes edit in Sublime, but if the changes are marginal then I find it more efficient to make the changes in Libreoffice and voila. Done.&lt;/p></description></item><item><title>Pandoc for Legal Documents</title><link>https://caseykuhlman.com/muniments/2013/2013-01-24-pandoc-legal-documents/</link><pubDate>Thu, 24 Jan 2013 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2013/2013-01-24-pandoc-legal-documents/</guid><description>&lt;p>Lately, I have been writing a lot in markdown. It is a freeing way to write documents because you focus more on the words than the tools around you in the wordprocessing interface. You pick your favorite environment to write &amp;ndash; for me it is Sublime Text &amp;ndash; and then you write. But, clients and courts do not read Github Flavored Markdown.&lt;/p>
&lt;p>This is where &lt;a href="http://johnmacfarlane.net/pandoc/index.html">Pandoc&lt;/a> comes into play. Pandoc is one of the many markdown renderers / translators available. You can think of it like a swiss army knife for changing document types. The thing that makes Pandoc quite interesting, for my purposes as a lawyer, is that it when you translate your markdown into an .odt file (or .docx for those who like completely bloated, prorietary things) you can establish exactly how the end document will look.&lt;/p>
&lt;p>What you do is first output some markdown text into an .odt file. Then you go into LibreOffice and modify the styles so that they are appropriate. I have templates setup for most of the documents I create and I simply linked the main styles that I use in my markdown to the ones in the template .ott files. I created multiple Pandoc .odt templates (which Pandoc calls reference files) to more or less mirror my .ott files.&lt;/p>
&lt;p>In Sublime, I &lt;a href="https://github.com/compleatang/sublimetext-Pandoc">forked&lt;/a> the excellent Pandoc plugin to modify it so that I could build custom templates and added a few other goodies so that Pandoc would play nicer with .odt files (which were not included in the original version). Using the forked Pandoc plugin I can simply output my markdown files to the appropriate reference file. I use the SideBarEnhancements plugin to right click on the newly created .odt and open in Libre to finalize everything. Mainly this entails dropping in my citations from Zotero and making sure that the styling is fine and everything is looking as it should. Save the new .odt file in GDrive. Output the .pdf to GDrive. Close the task on Teambox. Email the client. Done.&lt;/p>
&lt;p>One of the most annoying things about using a wordprocesser and doing research is the new lines that pdf copy places on your clipboard. Since Python is a relatively straightforward language and not &lt;em>that&lt;/em> different from Ruby for simple text manipulation, and since Sublime offers a very easy to understand API, it was quite easy &amp;ndash; even for a beginner such as I &amp;ndash; to &lt;a href="https://github.com/compleatang/sublimetext-pastepdf">build a plugin&lt;/a> that will allow me to ctrl+alt+v and thus strip the newlines so that the text block pastes as a single text block.&lt;/p>
&lt;p>Because Pandoc has inline footnoting, when I'm writing I simply drop in a marker quickly where I need to reference things. When Pandoc translates the markdown into an .odt file it builds the footnotes with the markers I need (usually pinpoints). Then I can simply inserting the citations from Zotero. When I was doing some research the other day I realized that FastCase does not have a translator for Zotero so I started working on one. It will be coming soon. And more about integrating Zotero and LibreOffice for legal research will accompany that.&lt;/p>
&lt;p>For legal documents, particularly client focused documents, you don't really need that much formatting. Indeed the less the better. Really you need only a handfull of styles within the document. Using a system such as this to force the proper styling techniques you can easily roll branding rules for your small firm and also let lawyers focus on the text rather than another Format Paste.&lt;/p>
&lt;p>Admitedly, collaboration is still imperfect. A huge percentage of lawyers still are on Word and so the .doc and .docx formats and awful Calibri are not going away anytime soon. There is no simple way, when you need to track changes and integrate comments into a document, to utilize some of the tools that make writing so much more enjoyable on a text processor. Luckily, however, using these techniques allows me to limit my time in a word processor &amp;ndash; even a quite nice one like LibreOffice.&lt;/p>
&lt;p>~ # ~&lt;/p></description></item></channel></rss>