<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>underWater desert Blogging</title><link>https://caseykuhlman.com/</link><description>A Site About Resilience and Authoritarianism</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>casey@caseykuhlman.com (Casey Kuhlman)</managingEditor><webMaster>casey@caseykuhlman.com (Casey Kuhlman)</webMaster><copyright>All Content Licensed CC BY-NC-SA 4.0</copyright><lastBuildDate>Fri, 21 Feb 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://caseykuhlman.com/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Gnome Shell Extensions -- Those Little Bundles of Joy</title><link>https://caseykuhlman.com/muniments/2014/2014-02-21-gnome-shell-extensions/</link><pubDate>Fri, 21 Feb 2014 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2014/2014-02-21-gnome-shell-extensions/</guid><description>&lt;p>I have yet to really get into any of the desktop interfaces other than Gnome. I've tried KDE and Unity. I'd like to try Elementary, but probably on an old laptop I'm going to set up for my in laws rather than my primary machine. Since about Gnome Shell 3.2, though, I've done little more than take tours around other desktop interfaces.&lt;/p>
&lt;p>In case you did not know, one of the greatest things about Linux is that you can do this. You can explore different desktop interfaces and find the one that works for you. Gnome works for me. It may not work for you. You may prefer another flavor. That's awesome! Because Linux successfully compartmentalizes different aspects of the computer it is &lt;em>nearly&lt;/em> trivial to change desktop interfaces without having to reinstall the entire Operating System. Especially if you are using one of the major distributions to provide the underlying portions of the operating system.&lt;/p>
&lt;h2 id="the-extensions-i-use">The Extensions I Use&lt;/h2>
&lt;p>I currently use sixteen extensions:&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/766/alternative-activities/">Alternate Activities Menu&lt;/a> has a nice workspace indicator. I do not really use one of its killer features which is to semi control the other extensions and to &amp;ldquo;remember&amp;rdquo; which applications are open in which workspaces (the latter because I'm anally retentive enough to always know where things are).&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/615/appindicator-support/">AppIndicator Support&lt;/a> is one of my favorite extensions right now. I have used some variety of this extension since shell 3.2, but this is the best in class for my (not) money. This extension does a great job of letting me customize where application indicators (tray icons, whatever they are called today) go &amp;ndash; either in the top panel or in the bottom message tray (the former I see much more often than the latter). This allows me to put things that I don't want to visually clutter my panel into the message tray where I don't really need to see them but every once in a while.&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/768/audio-input-switcher/">Audio Input Switcher&lt;/a> | &lt;a href="https://extensions.gnome.org/extension/751/audio-output-switcher/">Audio Output Switcher&lt;/a> are two great little tools that give me a quick way to switch what audio input | output I'm using from the system menu which is always the top right corner of the panel.&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/16/auto-move-windows/">Automove Windows&lt;/a> I spoke about this in my post on desktops. It does what it says and automatically moves windows to the specified workspace when you open them. It does not lock them into the workspace so you can move them around after they are opened, but it is nice to know that Spotify always opens in the Third Workspace or however you set it up.&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/595/autohide-battery/">Autohide Battery&lt;/a> does what it says and hides the battery icon from the panel when the battery is fully charged.&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/517/caffeine/">Caffeine&lt;/a> this is a great little extension which stops the screensaver and lock screen from being triggered. You can set it up to always turn on upon the occurrence of certain events. For example, I keep chromium on my system and then link Caffeine to always turn on when chromium is open. So if I want to watch videos on my computer I just use chromium rather than chrome which is my daily driver for browsing, and then I do not have to worry about the screensaver turning on. It's the little things.&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/111/calculator/">Calculator&lt;/a> when you press the Super (Windows) key in Gnome you go to the activities overview. This extension puts a wee little calculator there which you can use. I'm using it less and less.&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/97/coverflow-alt-tab/">Coverflow Alt-Tab&lt;/a> makes Alt-Tabbing beautiful in Gnome.&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/545/hide-top-bar/">Hide Top Bar&lt;/a> this is utterly an essential extension for me. I do not like having wasted pixels &lt;em>always&lt;/em> used at the top of my screen. If I want to see the panel I'm happy to scroll my mouse there or hit Super. Otherwise, leave me alone and let me focus on the task at hand. This is another extension which I have used various flavors of since I started using Gnome and I've resisted upgrading shells until I knew that an extension of this variety was working in the next version.&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/55/media-player-indicator/">Media Player Indicator&lt;/a> is another long-standing (for me) and very popular extension. It puts a summary of whatever media is playing (or open but not playing) into your system menu so you can control or see different things. It has always been good eye candy for the panel and in the latest version of Shell it has collapsed into the system menu which brightens that up a bit.&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/695/mediakeys-to-mpris2/">MediaKeys to MPRIS2&lt;/a> transmits my function F8 into a next song for Spotify and other apps.&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/732/message-tray-on-bottom-right-corner/">Message Tray on bottom right corner&lt;/a> over time, Gnome has changed how you get to the message tray. I like being able to fling my mouse at the bottom right corner and having the message tray pop up rather than Super+m. This is a nice to have but not essential extension for me because I care what is going on in the message tray only a couple of times a day.&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/53/pomodoro/">Pomodoro&lt;/a> timer. Must have.&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/425/project-hamster-extension/">Project Hamster Extension&lt;/a> how I track my billable and non-billable time fluctuates over time. Have tried many different solutions and I'm here now. Not sure if will stick but have been enjoying it for about a month now. Has a good autocomplete feature and looks a hell of a lot nicer than other applications. Being designed for Gnome specifically makes it appealing as well.&lt;/p>
&lt;p>&lt;a href="https://extensions.gnome.org/extension/19/user-themes/">User themes&lt;/a> allow me to have different themes for Gnome Shell to make it look, act, and feel different ways. I used Elegance Colors but there are tons of flavors available. This extension has been a must have since the very first version of Shell.&lt;/p>
&lt;h2 id="installing-uninstalling-enabling-disabling-extensions">Installing, Uninstalling, Enabling, Disabling Extensions&lt;/h2>
&lt;p>If you are in gnome and a user of normal variety, do this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo apt-get install gnome-tweak-tool
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You will be much happier thereafter. Tweak tool allows you to turn extensions on or off and also lets you get to the extension preferences and options interface which you will need from time to time.&lt;/p>
&lt;p>However, you can also get to these things from the &lt;a href="https://extensions.gnome.org/">gnome extensions web app&lt;/a> which is a brilliant tool. From there you can install, uninstall, enable, disable, and go to the preferences for any extension you have installed. It interacts with your desktop in a way which I really like, but could see how some paranoids would hate &amp;ndash; luckily because Gnome is open source those paranoids can see what information the web app is gathering from your desktop. The interface is simple and a very good way to try out different extensions to see the ones that are good for you!&lt;/p>
&lt;p>Happy Hacking!&lt;/p>
&lt;p>~ # ~&lt;/p></description></item><item><title>How I Use Multiple Workspaces</title><link>https://caseykuhlman.com/muniments/2014/2014-02-19-using-multiple-workspaces/</link><pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2014/2014-02-19-using-multiple-workspaces/</guid><description>&lt;p>When I first moved to Linux from Windows in Ubuntu 11.10, I was confused about multiple workspaces. I thought, coming from a Windows background, that they would be overkill and require significant resources from my very old at that time laptop. My laptop then was about a 5 year old Dell that Windows Vista barely worked on. One of the huge reasons I decided to try Linux at all was the way that it was reported to be able to handle older hardware with style and grace. That said, I am always paranoid about what processes are running at any time and have for years always kept a close eye on system resource allocation (like since about Windows 3 years). Apps which are resource hogs get uninstalled or somehow sandboxed. Apps which I do not think I will need regularly get uninstalled with a vengeance. OS components I do not want get uninstalled &amp;ndash; to the extent the OS will still work if I uninstall them.&lt;/p>
&lt;p>Coming from a Windows background, and being generally a fairly linear unitask thinker, I failed to see the benefit in multiple workspaces. I tend to keep only a few applications opened at any one time in Windows so why would I need multiple workspaces I thought. Then I installed my first version of Gnome Shell.&lt;/p>
&lt;p>One of Gnome Shell's biggest achievements as far as I'm concerned is dynamic workspaces. The basic idea is that the desktop system creates one workspace and then if you need additional ones you can either open an application in that workspace (more on this in a moment) or you can move an application to a new workspace. The desktop system will automatically create and delete workspaces based on what you are using at any one time. It is a clutter killer (which I adore) but also extraordinarily functional.&lt;/p>
&lt;h2 id="workspaces-for-different-portions-of-the-computing-brain">Workspaces for Different Portions of the Computing Brain&lt;/h2>
&lt;p>I have &amp;ndash; for the most part &amp;ndash; quadroned off how I interact with my computer into a quadrons.&lt;/p>
&lt;ol>
&lt;li>The first quadron is my terminal workspace. I use Guake and have written about my terminal setup &lt;a href="http://coda.caseykuhlman.com//entries/2014/on-shells.html">here&lt;/a>. Guake is not its own workspace, as it resides &amp;ldquo;above&amp;rdquo; all my workspaces and whenever I need it, it is a simple &lt;code>F12&lt;/code> away. In this quadron is where I install, uninstall apps, generally work &amp;ldquo;on&amp;rdquo; my computer.&lt;/li>
&lt;li>The second quadron is my media workspace. This is generally my workspace number 3 (or my bottom workspace in Gnome's vertical configuration of workspaces). I have set up all my media players to open in this window. So from my primary workspace I simply slide down two workspaces if I want to change the album that is playing or do something that I cannot easily do from either media keys or the panel in Gnome.&lt;/li>
&lt;li>The third quadron is my reference workspace. This is the workspace where I keep all the things that I need on a regular basis but do not want cluttering my primary workspace. This is the first workspace below my primary workspace. These are, for the most part, Chrome windows which I open as &lt;code>--apps&lt;/code> which allows me to open them with no decoration (which are nothing but wasted pixels if I only want to see what X site says). In this workspace I traditionally keep open four Chrome windows: &lt;a href="https://evernote.com/">Evernote&lt;/a>; my Google Calendar; my Google Drive; and my &lt;a href="https://redbooth.com">Redbooth&lt;/a>. Evernote is my filing cabinet more or less and I use it for tons of different things. They have been quite public that they will not make a desktop application for Linux (which I would use relentlessly) but their web app is not bad. It used to be a resource hog but has improved (or else my new laptop is just better able to handle it). Redbooth is the Project Management Interface we use at Watershed for years now. It handles all our tasks, etc. so I need to have this open. We use Google Drive a lot for Watershed so it is helpful to see the feed rather than simply using a file browser as the feed gives me a view of what attorneys are working on quickly. With the exception of Evernote, I'm quite happy keeping these as webapps. Even when I'm in Somaliland where bandwidth is limited, all of these webapps are extremely efficient in their bandwidth usage so once they are loaded they simply Ajax call their way through the day which saves me bandwidth and also still let's me keep everything in sync.&lt;/li>
&lt;li>The fourth quadron is my primary workspace. Unless I'm deep in work on a complex task requiring multiple pdf windows or something, I keep two applications running in this workspace. I keep my primary chrome window here which always has my personal and work gmails up and whatever else I happen to be reading or writing or working on in Chrome. I also keep my Sublime window open at all times. I code in Sublime, write memos in Sublime, draft contracts in Sublime, draft laws in Sublime, generally Sublime is my &amp;ldquo;work&amp;rdquo; hub for documents. If I need to open pdf or doc or odt files I generally will pull them up from Sublime rather than opening a file browser.&lt;/li>
&lt;/ol>
&lt;h2 id="keyboard-shortcuts-for-workspace-bliss">Keyboard Shortcuts for Workspace Bliss&lt;/h2>
&lt;p>Keyboard shortcuts. Oh how I love them. So easy to setup. Go to Keyboard in your Applications menu and then click on Shortcuts. For workspace and windows stuff, go to the Navigation sub-tab. Here's the shortcuts I use:&lt;/p>
&lt;ul>
&lt;li>Move window one workspace down: Alt+Super+Up&lt;/li>
&lt;li>Move window one workspace up: Alt+Super+Down&lt;/li>
&lt;li>Move to workspace up: Ctrl+Super+Up&lt;/li>
&lt;li>Move to workspace down: Ctrl+Super+Down&lt;/li>
&lt;/ul>
&lt;p>That's It! That is really all you need. Move a window up or down, and move your viewer up or down. While you are in here, do yourself a favour and go to Custom Shortcuts, Add a Shortcut, nautilus (as the command), Super+E (or whatever shortcut you fancy). Now you are a shortcut away from your file browser no matter where you are.&lt;/p>
&lt;h2 id="automatic-workspace-management">Automatic Workspace Management&lt;/h2>
&lt;p>I lurve automating things. With Gnome Shell it is very easy to ensure that (most) of my windows open in the specific place that I want them to. Gnome Shell extensions are lovely little applets which open up the possibilities of what you can do with your desktop. I should publish a list of the ones I use, but for now, only this &lt;a href="https://extensions.gnome.org/extension/16/auto-move-windows/">one&lt;/a> is relevant. It is an extension which automatically moves windows to a specific workspace. That's it. So whenever I open Spotify, I have set it to open in Workspace 3. Boom! Just that simple. To set up the extensions you will need to have gnome-tweak-tool installed:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo apt-get install gnome-tweak-tool
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you go to the above link and push the button to install. After that open tweak and go to the Extensions tab to turn it on. You can also go to &amp;ldquo;Installed Extensions&amp;rdquo; in the gnome extensions site to turn on extensions, but generally Tweak Tool is better. Also there will be a link in Tweak Tool Extensions tab to the Extension settings. Click there. Then you will see a place to &amp;ldquo;Add rule&amp;rdquo; click there, then click the program you want and the workspace you want.&lt;/p>
&lt;p>If you prefer the old school version (as I do) then you can use dconf tool.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo apt-get install dconf-editor
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then from dconf you go to: &lt;code>org -&amp;gt; gnome -&amp;gt; shell -&amp;gt; extensions -&amp;gt; auto-move-windows&lt;/code>. Once you get there then you type in the correct APPLICATION.desktop file and the workspace. So the string should look something like this: &lt;code>['spotify.desktop:3', 'xnoise.desktop:3']&lt;/code>. That's it. Then whenever you open the application it will open in the correct place.&lt;/p>
&lt;p>Happy Hacking!&lt;/p>
&lt;p>~ # ~&lt;/p></description></item><item><title>Working with PDFs in Linux</title><link>https://caseykuhlman.com/muniments/2014/2014-02-13-pdf-extract/</link><pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2014/2014-02-13-pdf-extract/</guid><description>&lt;p>PDFs are the bane of every lawyer's existence. It is unfortunate that we break free of our addiction to PDFs and this is the thought behind my RMOC project. Until that is a viable option for working with PDFs, here is my suite of &lt;strong>free&lt;/strong> PDF tools that can be used in the stead of the overly engineered Acrobat.&lt;/p>
&lt;h2 id="reading-pdfs">Reading PDFs&lt;/h2>
&lt;p>Most any distro will contain a PDF reader. By default Ubuntu installs Evince which is lightweight and works as a viewer. Evince still has not implemented any highlight or annotate functions, but that is OK for me since I only use PDFs to read and then copy whatever I need into Sublime Text &amp;ndash; which is where I create 99% of my documents. One of my partners likes to use Okular which has highlighting and annotating features to it. The problem is that Okular runs on KDE a different desktop environment from what I use (Gnome) and Okular does not integrate with GTK (the Gnome Toolkit for Desktop Applications) this means that installing Okular requires a ton of packages that I would never use but for within Okular. In the past I have tried it but have found that &amp;ndash; for me &amp;ndash; it is a too-much solution. Installing Okular is straightforward:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo apt-get install okular
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you are all set to go.&lt;/p>
&lt;h2 id="extracting-pdfs">Extracting PDFs&lt;/h2>
&lt;p>Sometimes I prefer reading PDFs on Android with &lt;a href="https://play.google.com/store/apps/details?id=udk.android.reader">ezPDF Reader&lt;/a> as its interface is nice. I generally will do this on my tablet. Then I simply save the PDF in my Dropbox which will sync to my desktop. After that, I forked a command line tool (I think from &lt;a href="http://blog.hartwork.org/?p=612">here&lt;/a>) for python which extracts the notes that I added to the document into a command line tool which I can then copy and paste into Sublime.&lt;/p>
&lt;p>To use the extractor, you need to have a few packages installed first:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo apt-get install poppler-data poppler-utils python-poppler
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you will need to paste the following script into your ~/.bin folder (or anywhere else that is in your path). I called this ~/.bin/extractpdfs but of course you can call it anything.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e">#!/usr/bin/env python&lt;/span>
&lt;span style="color:#75715e">#^jist /home/coda/.bin/extractpdfs -u 8666561&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> poppler
&lt;span style="color:#f92672">import&lt;/span> sys
&lt;span style="color:#f92672">import&lt;/span> urllib
&lt;span style="color:#f92672">import&lt;/span> os
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
input_filename &lt;span style="color:#f92672">=&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>argv[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;span style="color:#75715e"># http://blog.hartwork.org/?p=612&lt;/span>
document &lt;span style="color:#f92672">=&lt;/span> poppler&lt;span style="color:#f92672">.&lt;/span>document_new_from_file(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">file://&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> \
urllib&lt;span style="color:#f92672">.&lt;/span>pathname2url(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>abspath(input_filename)), None)
n_pages &lt;span style="color:#f92672">=&lt;/span> document&lt;span style="color:#f92672">.&lt;/span>get_n_pages()
all_annots &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n_pages):
page &lt;span style="color:#f92672">=&lt;/span> document&lt;span style="color:#f92672">.&lt;/span>get_page(i)
annot_mappings &lt;span style="color:#f92672">=&lt;/span> page&lt;span style="color:#f92672">.&lt;/span>get_annot_mapping ()
num_annots &lt;span style="color:#f92672">=&lt;/span> len(annot_mappings)
&lt;span style="color:#66d9ef">if&lt;/span> num_annots &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;span style="color:#66d9ef">for&lt;/span> annot_mapping &lt;span style="color:#f92672">in&lt;/span> annot_mappings:
&lt;span style="color:#66d9ef">if&lt;/span> annot_mapping&lt;span style="color:#f92672">.&lt;/span>annot&lt;span style="color:#f92672">.&lt;/span>get_annot_type()&lt;span style="color:#f92672">.&lt;/span>value_name &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">POPPLER_ANNOT_LINK&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>:
all_annots &lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e">#print &amp;#39;page: {0:3}, {1:10}, type: {2:10}, content: {3}&amp;#39;.format(i+1, annot_mapping.annot.get_modified(), annot_mapping.annot.get_annot_type().value_nick, annot_mapping.annot.get_contents())&lt;/span>
&lt;span style="color:#66d9ef">print&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">page: {0:3}: {3}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, annot_mapping&lt;span style="color:#f92672">.&lt;/span>annot&lt;span style="color:#f92672">.&lt;/span>get_modified(), annot_mapping&lt;span style="color:#f92672">.&lt;/span>annot&lt;span style="color:#f92672">.&lt;/span>get_annot_type()&lt;span style="color:#f92672">.&lt;/span>value_nick, annot_mapping&lt;span style="color:#f92672">.&lt;/span>annot&lt;span style="color:#f92672">.&lt;/span>get_contents())
&lt;span style="color:#66d9ef">if&lt;/span> all_annots &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;span style="color:#66d9ef">print&lt;/span> str(all_annots) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> annotation(s) found&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span>:
&lt;span style="color:#66d9ef">print&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">no annotations found&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">__main__&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>:
main()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you just want to use the script as is then you can simply call the following from the command line.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget -O $FILE https://gist.github.com/compleatang/8666561/raw/79ee25d3d1a4c6f1ed7c0e9de1db951d947e3b17/extractpdfs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What this script does is to extract the annotations into a text output on the command line. I could not figure out how to extract the highlights because of the weird way that highlighting works and because poppler is not currently set up for that. There is a ruby gem called pdf-reader that I have worked with a bit that I &lt;em>think&lt;/em> would work for extracting highlights but I have not had the time to work with it in detail.&lt;/p>
&lt;p>The output of calling the &lt;code>extractpdfs $PDF_FILE&lt;/code> will look something like this:&lt;/p>
&lt;p>page: 24: why did she not want to go thru her records&amp;hellip;?
page: 26: make a chart detailing her claims, his payments, and the amounts she says she is borrowing?
page: 28: use this figure as illustrative for making the chart.
page: 31: fix this.&lt;/p>
&lt;h2 id="ocr-ing-pdfs">OCR-ing PDFs&lt;/h2>
&lt;p>When you get actual paper the first thing most lawyers &lt;em>should&lt;/em> do is to scan and OCR (optical character recognition &amp;ndash; or make the scan so that you can search and copy and paste the text) the document. I use gscan2pdf to do this. It is a straight forward gui application what will ocr and clean up your pdf documents.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo apt-get install gscan2pdf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I have used a lot of the OCR gui's available for Ubuntu and for my money gscan is the best. Cleaning up PDFs and OCRing them is just a click or two away.&lt;/p>
&lt;p>The difficulty that sometimes arises is that open source OCR technology is quite a bit behind proprietary technology. On Windows there are a couple of really good OCR technologies and on OSX there are also, but those vendors ignore Linux for the most part. Given how much I use OCR I would happily pay for a Linux native solution which is not Abby's per page basis, but I have not found one that I believe will work for me. So for now, I am left with the open source solutions. Gscan will integrate with the major OCR technologies on Linux and when you go to OCR your document you can choose which one you want to use. It will not be perfect, especially if you have a bad scane, but it will be a decent 80% solution that is 100% free.&lt;/p>
&lt;h2 id="modifying-pdfs">Modifying PDFs&lt;/h2>
&lt;p>Splitting PDFs, combining PDFs, deleting pages from PDFs, rearranging PDFs is most simple on Linux than it is with Adobe if you ask me. I use a great package called pdfmod which lets me do all of these things.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo apt-get install pdfmod
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once you have it installed it is very straightforward to split, combine, delete pages, add pages, and rearrange pages in your PDFs. Basically the package does just what you want it to do, you can drag and drop all the pages to correctly order your PDF's; you can drag in pages from other windows; you can click on pages and press delete to remove them. It is very straight forward.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>Working with PDFs in Linux is not 100% ideal and the programs to work with PDFs are not cohesive as you may get with Adobe in windows or osx. However, it is imminently manageable with some combination of Evince, Gscan2PDF and PdfMod you can get to almost a complete solution.&lt;/p>
&lt;p>Happy Hacking!&lt;/p>
&lt;p>~ # ~&lt;/p></description></item><item><title>Remembering Your Packages</title><link>https://caseykuhlman.com/muniments/2014/2014-02-11-remember-your-packages/</link><pubDate>Tue, 11 Feb 2014 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2014/2014-02-11-remember-your-packages/</guid><description>&lt;p>What programs (packages) do I use? This is a perennial problem. It is always easy to remember those packages you use all the time but what about those packages that you do not but you want them there when you need them. Here is a three step system for ensuring that you never forget to reinstall packages you want when you upgrade your system or reinstall you operating system.&lt;/p>
&lt;h2 id="step-1----build-an-install-script">Step 1 &amp;ndash; Build an Install Script&lt;/h2>
&lt;p>I have slowly been speaking about the parts of my installation script over the course of most of my Linux for Lawyers series. I have written about how to use &lt;a href="http://coda.caseykuhlman.com//entries/2014/dropbox-as-a-settings-repository.html">Dropbox as a settings repository&lt;/a> and to automatically pull those settings in when you reinstall your system and I have also written about setting up your &lt;a href="http://coda.caseykuhlman.com//entries/2014/on-shells.html">shell environment&lt;/a>. The system that I use depends in large part on a fairly detailed installation script that I use after installing or reinstalling a Linux operating system. So I keep my packages in that install script.&lt;/p>
&lt;p>My install script contains a long list of the packages which I have installed previously. This is held in an array in shell scripting format. Then the install script builds a function which is creatively called &lt;code>install_a_bunch&lt;/code>. Shell scripting is not terribly easy to follow along with, but what the function essentially does is to first check if the packages I'm trying to install are already installed. Based on the return of the sudo apt-get &amp;ndash;qq &amp;ndash;dry-run call, it parses the packages into three buckets. The first bucket contains those packages which are not installed and can be found in the repositories. The second bucket contains those packages which are already installed. The third bucket contains those packages which cannot be found in the repositories. The final thing the function does is to install those packages which are in the first bucket.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pkgs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#f92672">(&lt;/span> alacarte audacity blueman chromium-browser cifs-utils conky ..&lt;span style="color:#f92672">[&lt;/span>REDACTED&lt;span style="color:#f92672">]&lt;/span>.. zotero-standalone zsh &lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> install_a_bunch&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
rqst_pkgs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>@&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
pkgs_inst&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> pkg in &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>rqst_pkgs[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">checking for package: &lt;/span>$pkg&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
sudo apt-get -qq --dry-run install $pkg &amp;amp;&amp;gt;/dev/null
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> $? !&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
dpkg -s $pkg 2&amp;gt;/dev/null | grep -q installed
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> $? &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
pkgs_inst&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkgs_inst[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkg&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">)&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkg&lt;span style="color:#e6db74">: not installed, will install it.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkg&lt;span style="color:#e6db74">: already installed.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkg&lt;span style="color:#e6db74">: cannot find in the repos, try checking the apt repositories&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#66d9ef">done&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#f92672">[&lt;/span> ! &lt;span style="color:#e6db74">${#&lt;/span>pkgs_inst[@]&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
sudo apt-get install -y &lt;span style="color:#e6db74">${&lt;/span>pkgs_inst[@]&lt;span style="color:#e6db74">}&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;nothing to install&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
install_a_bunch &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkgs[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Linux package managers are decentralized things. This means that you can add and remove other package repositories besides the ones that come pre-installed with the system. In Ubuntu this is done with the add-apt-repository command. The third bucket was put in because many of the packages / programs I use are installed not from the standard repositories but from specialized repositories. In Ubuntu, many packages that are in the standard Ubuntu repositories may be a ways behind the package's latest stable release so it is often necessary to add other repositories which point to the latest stable releases rather than using the standard Ubuntu releases. For example, as of this writing, LibreOffice version 4.1.2 is what is sourced from the standard repositories while version 4.2.0 is sourced from the LibreOffice repositories. For that package and others, I will use the specialized repository rather than the standard repository.&lt;/p>
&lt;h2 id="step-2----setup-your-shell-to-log-repositories-and-packages">Step 2 &amp;ndash; Setup Your Shell to Log Repositories and Packages&lt;/h2>
&lt;p>Once you have an install script ready to go, then the next step is to set up your shell with shortcuts that you can use to both add a repository and install packages while also logging what you are adding into the install script.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#66d9ef">function&lt;/span> install&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
packages&lt;span style="color:#f92672">=&lt;/span>$@
sudo apt-get install &lt;span style="color:#e6db74">${&lt;/span>=packages&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$packages&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.installd
&lt;span style="color:#f92672">}&lt;/span>
apt_pref_compdef install &lt;span style="color:#e6db74">&amp;#34;install&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> add-repo&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
repos&lt;span style="color:#f92672">=&lt;/span>$@
sudo add-apt-repository -y ppa:&lt;span style="color:#e6db74">${&lt;/span>=repos&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">sudo add-apt-repository -y ppa:&lt;/span>$repos&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.installd
sudo apt-get update
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first function above, &lt;code>install&lt;/code>, is used so that when I'm copying and pasting from a site which tells me to do a sudo apt-get install that I just can copy the install and whatever packages I'm to install. The function will do a sudo apt-get install of the packages and then will log those packages in the install script. The line after the install function is a compdef function which enables tab completion in zsh.&lt;/p>
&lt;p>The second function above, &lt;code>add-repo&lt;/code>, is a corollary of the install function. It performs an add-apt-repository call and then logs that in the install script. Finally it performs a sudo apt-get update which you always want to do after you add a repository so that the Ubuntu list of packages gets updated with the packages from the new repository.&lt;/p>
&lt;h2 id="step-3----keep-it-organized">Step 3 &amp;ndash; Keep It Organized&lt;/h2>
&lt;p>The logging functions above will put new repositories and packages at the end of your install script (note, adding onto the end of a text file in shell is super easy with the &lt;code>echo &amp;quot;BLAH&amp;quot; &amp;gt;&amp;gt; FILE&lt;/code> call). Then every once in a while I just organize the script. I cut and paste the repositories into the proper place in my install script and then I use ruby to organize the packages.&lt;/p>
&lt;p>If you have ruby installed on your computer then from shell you type &lt;code>irb&lt;/code>. This will load the interactive ruby console. After that, here is what I do (note the $ below is the cursor):&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">%w(&lt;/span>&lt;span style="color:#e6db74">_CUT_AND_PASTE_THE_PACKAGES_FROM_PKGS_IN_INSTALL_SCRIPT_&lt;/span>&lt;span style="color:#e6db74">)&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> a &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">%w(&lt;/span>&lt;span style="color:#e6db74">_CUT_AND_PASTE_THE_PACKAGES_FROM_THE_BOTTOM_OF_INSTALL_SCRIPT_&lt;/span>&lt;span style="color:#e6db74">)&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> a&lt;span style="color:#f92672">.&lt;/span>flatten&lt;span style="color:#f92672">.&lt;/span>sort&lt;span style="color:#f92672">.&lt;/span>uniq&lt;span style="color:#f92672">.&lt;/span>join(&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> exit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then just copy the output from the final ruby call there into your packages array in the install script and delete the packages from the bottom. Then you are all set. You have all your packages logged and up to date.&lt;/p>
&lt;p>Happy Hacking!&lt;/p>
&lt;p>~ # ~&lt;/p></description></item><item><title>Conky -- Smooth Operations</title><link>https://caseykuhlman.com/muniments/2014/2014-02-05-on-conky/</link><pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2014/2014-02-05-on-conky/</guid><description>&lt;p>&lt;a href="http://conky.sourceforge.net">Conky&lt;/a> is a tool I have used since about the time I started using Linux. It is a great piece of kit. When you first start using Conky it can be a bit overwhelming because it has a ton of options and configuring it is not terribly straight forward for those who do not like command line and editing files. But once you get over the initial hump it is amazing. It is a set and forget tool that I have used for years with very little modification once I had my initial set up. Here is what my current setup looks like:&lt;/p>
&lt;p>I know what the different rings mean, but no one else does. So as a way of introduction the rings are as follows:&lt;/p>
&lt;ol>
&lt;li>Clock.&lt;/li>
&lt;li>Processor load (I have an i9 processor with 8 cores so that is why there are eight half concentric rings layered into one ring).&lt;/li>
&lt;li>Memory load (outside) | Battery charge (inside).&lt;/li>
&lt;li>Network traffic (left side outer is outbound via ethernet, left inner is inbound via ethernet, right side outer is outbound via wireless, right side inner is inbound via wireless) | Network ports (deep inner).&lt;/li>
&lt;li>Drives (percent used on various drives).&lt;/li>
&lt;/ol>
&lt;p>On &lt;a href="https://github.com/compleatang/Conky">this page&lt;/a> you can see how my conky looks with other wallpapers.&lt;/p>
&lt;h2 id="setting-up-conky">Setting up Conky&lt;/h2>
&lt;p>In Ubuntu, Conky is in the main repositories so it is very straight forward to install:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo apt-get install conky
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the installation finishes you will be all set up. If you prefer a GUI to set up your conky with some pretty good looking initial themes, then I would encourage you to read this article over at &lt;a href="http://wsl.so/1gLQnQH">WebUPD8&lt;/a> and follow the instructions for installing conky manager.&lt;/p>
&lt;p>I prefer to fork and modify other people's open source code and so that is what the rest of this tutorial will work towards. To get an idea of the different things that you can do with conky I would encourage you to glance at the above article first, and then go over to DeviantArt and look through the &lt;a href="http://wsl.so/1gLQJ9R">Conky galleries&lt;/a>. I originally did this but have heavily modified my theme which was originally based on &lt;a href="http://wsl.so/1gLR7Fv">work&lt;/a> by &lt;a href="http://wsl.so/1gLR8Jr">LondonAli at DeviantArt&lt;/a>. She has some beautiful conky themes she has built and her gallery is well worth pursuing.&lt;/p>
&lt;p>If you find a theme which you like then you simply download the .zip file and extract it into your &lt;code>~/.conky&lt;/code> folder. Generally to do this, I right click on the Download link on the top of the right sidebar in DeviantArt, then Copy Link. After that, in terminal I type:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cd ~/.conky
$ wget -O conky.tgz $PASTE_LINK_WITH_CTRL_SHIFT_V
$ tar -xzvf conky.tgz
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or, if it is a zip download&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cd ~/.conky
$ wget -O conky.zip $PASTE_LINK_WITH_CTRL_SHIFT_V
$ unzip conky
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the files are extracted into your conky folder then you will want to cd into that directory and look at what you actually have. If all the files extracted into their own directory, I generally will move them back to the normal conky directory. Now, you are ready to start conky. I use the command line when I'm testing conky because you will be wanting to stop and restart it as you make hacks along the way.&lt;/p>
&lt;p>In the command line again, the command to start conky is simple:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ conky -c $CONKY_RC_FILE
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, when you want to stop it you simply type &lt;code>CTRL+C&lt;/code> when you are in your terminal. (By the by, ctrl+c in a terminal is cancel. This is why in terminal you need to type ctrl+SHIFT+c to copy something. This is a bit confusing and I've been thinking I need to change this default (which you can always do by modifying your shell config files) but haven't yet done it.)&lt;/p>
&lt;p>When I was starting with Conky, I downloaded many conky configs from DeviantArt and then started conky with one, then stopped it and started it again with another, etc. until I found the one that I liked. So when you extract the archive you downloaded from DeviantArt usually you will want to see that the different conkyrc files have different names so that you can try different ones on your desktop.&lt;/p>
&lt;p>On more sophisticated setups there are two files that conky will need, a conkyrc file which is the main file and a lua file which is used to draw cool shapes and sizes. Here is my conkyrc file. If you want to see my conky.lua file it is available &lt;a href="https://github.com/compleatang/Conky/blob/master/conky.lua">here&lt;/a>.&lt;/p>
&lt;pre>&lt;code>#--- Conkyrc, Originally by londonali1010, modified by compleatang ---#
background no
net_avg_samples 2
cpu_avg_samples 2
no_buffers yes
double_buffer yes
update_interval 1.0
default_color 467159
own_window yes
own_window_type normal
own_window_class conky
own_window_hints undecorated,skip_taskbar,skip_pager,sticky,below
own_window_transparent no
own_window_argb_visual yes
own_window_argb_value 0
border_inner_margin 0
border_outer_margin 0
default_outline_color white
default_shade_color white
draw_borders no
draw_graph_borders yes
stippled_borders 0
draw_outline no
draw_shades no
draw_shadows no
show_graph_scale no
show_graph_range no
use_xft yes
xftfont Sawasdee:size=24
xftalpha 0.8
uppercase no
minimum_size 1366 300
maximum_width 1366
use_spacer none
alignment tm
gap_x 0
gap_y 50
lua_load ~/.conky/conky.lua
lua_draw_hook_pre conky_widgets
TEXT
${voffset 100}${alignc}${time %A, %d %B %Y}
&lt;/code>&lt;/pre>&lt;p>Once you have those installed and modified to your liking you are more or less all set.&lt;/p>
&lt;h2 id="take-your-conky-to-the-next-level-with-auto-colors">Take Your Conky to the Next Level with Auto-Colors&lt;/h2>
&lt;p>I was interested in seeing if I could modify my conky to automatically pick colors that complement my wallpaper and I wanted it to run whenever I changed my wallpaper. This is a hack to be sure, but it works on Ubuntu at least. One of the things that Ubuntu (or Gnome, am not sure) does is when you tell it there is a new wallpaper but pick a file from a different location, it will copy that file into the ~/Wallpapers folder. I keep my wallpapers in my Dropbox so what I did was to set up a ruby process that watches the Wallpapers folder and when a new file is added, it modifies conky for me.&lt;/p>
&lt;p>The ruby file is pretty straight forward, but to use it you will have to install two gems with &lt;code>gem install listen miro&lt;/code>. After installing those gems, you are set.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#75715e">#!/usr/bin/env ruby&lt;/span>
require &lt;span style="color:#e6db74">&amp;#39;miro&amp;#39;&lt;/span>
require &lt;span style="color:#e6db74">&amp;#39;listen&amp;#39;&lt;/span>
&lt;span style="color:#75715e"># set defaults&lt;/span>
@conky_rc_file &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/home/coda/.conky/conkyrc&amp;#39;&lt;/span>
@conky_lua_file &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/home/coda/.conky/conky.lua&amp;#39;&lt;/span>
watch_dir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/home/coda/Wallpapers&amp;#39;&lt;/span>
&lt;span style="color:#75715e"># miro options&lt;/span>
&lt;span style="color:#66d9ef">Miro&lt;/span>&lt;span style="color:#f92672">.&lt;/span>options&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">:color_count&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>
&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#66d9ef">Miro&lt;/span>&lt;span style="color:#f92672">.&lt;/span>options&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">:resolution&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;1500x1500&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">get_colors&lt;/span>(new_wallpaper)
puts &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">getting colors for &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>new_wallpaper&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
colors &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">Miro&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">DominantColors&lt;/span>&lt;span style="color:#f92672">.&lt;/span>new(new_wallpaper)&lt;span style="color:#f92672">.&lt;/span>to_hex&lt;span style="color:#f92672">.&lt;/span>sort
@conky_txt_color_default &lt;span style="color:#f92672">=&lt;/span> colors&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#f92672">..&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
@conky_bg_color_default &lt;span style="color:#f92672">=&lt;/span> colors&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#f92672">..&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
@conky_fg_color_default &lt;span style="color:#f92672">=&lt;/span> colors&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#f92672">..&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">replace_colors_all&lt;/span> text, bg, fg
system(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">sed &amp;#39;-i&amp;#39; &amp;#39;s/default_color .*$/default_color &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>text&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&amp;#39; &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>@conky_rc_file&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
system(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">sed &amp;#39;-i&amp;#39; &amp;#39;s/color_bg .*$/color_bg = 0x&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>bg&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&amp;#39; &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>@conky_lua_file&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
system(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">sed &amp;#39;-i&amp;#39; &amp;#39;s/color_fg .*$/color_fg = 0x&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>fg&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&amp;#39; &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>@conky_lua_file&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">end&lt;/span>
listener &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">Listen&lt;/span>&lt;span style="color:#f92672">.&lt;/span>to(watch_dir) &lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#f92672">|&lt;/span>modified, added, removed&lt;span style="color:#f92672">|&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> added&lt;span style="color:#f92672">.&lt;/span>last
get_colors(added&lt;span style="color:#f92672">.&lt;/span>last)
replace_colors_all(@conky_txt_color_default, @conky_bg_color_default, @conky_fg_color_default)
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
listener&lt;span style="color:#f92672">.&lt;/span>start
sleep
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since the conky deamon watches the conky files and will reload itself when the files are modified you do not have to add a restart command to restart conky. To make this run on startup and to stay running as a deamon in the background along with conky this is what I did. Another gem to install with &lt;code>gem install foreman&lt;/code>. Then add a Procfile to the ~/.conky folder that looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#e6db74">conky_main&lt;/span>: &lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">usr&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>bin&lt;span style="color:#f92672">/&lt;/span>conky &lt;span style="color:#f92672">-&lt;/span>c &lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">home&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>coda&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#f92672">.&lt;/span>conky&lt;span style="color:#f92672">/&lt;/span>conkyrc
&lt;span style="color:#e6db74">conky_colors&lt;/span>: &lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">home&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>coda&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#f92672">.&lt;/span>conky&lt;span style="color:#f92672">/&lt;/span>conky_colorsd
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lastly, I added a custom startup script:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#!/usr/bin/env zsh
&lt;/span>&lt;span style="color:#75715e">&lt;/span>source ~/.zshrc
foreman start -f /home/coda/.conky/Procfile &amp;amp;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once you add the startup script, you will need to make sure you can execute it with &lt;code>chmod +x startup.sh&lt;/code> or whatever you call it. The final step is to call the startup script when you log into your computer by adding it to your Startup Applications. After that you are all set. The startup script will start foreman, which will start normal conky with the right conkyrc that you give to it and also the conky_colorsd deamon which will watch for wallpaper changes.&lt;/p>
&lt;h2 id="further-customization">Further Customization&lt;/h2>
&lt;p>The conky_colorsd daemon is OK. But sometimes it gets the colors wrong. Also if I used a Wallpaper from the ~/Wallpaper folder (one I've used before) or from the standard Ubuntu wallpapers, the daemon will not see those changes and will not run the modification script. So I also built a conky_colors which is executable. I symlink this into my ~/.bin folder so that I can always call &lt;code>conky_colors&lt;/code> from the command line. The process for conky_colors is roughly the same, it will look at the Wallpaper that currently is there, find its primary colors and then allow me to pick which colors I want to use for the text, ring forground and ring background.&lt;/p>
&lt;p>There is one minor hiccup in the miro gem which does not do well parsing files that have spaces in them. So sometimes when you change to a wallpaper and nothing happens, it could be because of that, running the manual script should solve that process.&lt;/p>
&lt;p>Voila! A completely wonderful system.&lt;/p>
&lt;h2 id="want-to-just-copy-me">Want to Just Copy Me?&lt;/h2>
&lt;p>No problem as long as you have ruby installed on your system. Two steps and you're set:&lt;/p>
&lt;ol>
&lt;li>&lt;code>cd ~ &amp;amp;&amp;amp; git clone https://github.com/compleatang/Conky.git .conky &amp;amp;&amp;amp; gem install listen miro foreman&lt;/code>&lt;/li>
&lt;li>Add ~/.conky/startup.sh to your Startup Applications&lt;/li>
&lt;/ol>
&lt;p>Happy Hacking!&lt;/p>
&lt;p>~ # ~&lt;/p></description></item><item><title>Why Using Shells are Great</title><link>https://caseykuhlman.com/muniments/2014/2014-02-04-on-shells/</link><pubDate>Tue, 04 Feb 2014 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2014/2014-02-04-on-shells/</guid><description>&lt;p>I love using the shell; however so many people do not. My argument to others to use your shell more is simply that you &lt;strong>see&lt;/strong> what is happening with your computer a lot easier than you can with a graphical user interface (GUI). Basically, your shell is somewhat like a glass bottom boat to see what your computer is actually doing. On linux, GUI's often have an option to pull up some of what your computer is doing, but for the most part they do not.&lt;/p>
&lt;p>The other major argument for using your shell is that once you have it set up it is fast. Damn fast. I can do so much so quickly with my shell that takes me a lot longer with a GUI. This means that I spend last time on both billable and non-billable tasks &amp;ndash; leaving more time to do other things.&lt;/p>
&lt;h2 id="setting-up-a-drop-down-terminal-in-ubuntu">Setting up a Drop Down Terminal in Ubuntu&lt;/h2>
&lt;p>Every POSIX system has a shell terminal application which you can use. But the first time you open it, it usually looks super scary &amp;ndash; as in DOS scary. The best news is that once you get over that initial shock (perhaps by following this small tutorial) it can be a very pleasant experience. In Ubuntu you can get to your shell by typing &lt;code>ctrl+alt+t&lt;/code> (for terminal). I don't like the main Gnome terminal application not because it is bad, indeed it is perfectly fine. I just prefer &lt;a href="https://github.com/Guake/guake">Guake&lt;/a> because it is a terminal which stays hidden at the &amp;ldquo;top&amp;rdquo; of my screen completely out of sight. I start Guake on login, so it is &lt;em>always&lt;/em> available. All I have to do is to press &lt;code>F12&lt;/code> and I'm instantly in a terminal which drops down over my open program. I set Guake to take up about 45% of my screen real estate which allows me to see the rest of whatever application I need. There is a newer terminal application, &lt;a href="https://github.com/ozcanesen/terra-terminal">Terra Terminal&lt;/a>, which performs similarly in some respects but adds additional features, such as terminal splitting which I never used. Terra is still in development so after using it for a while I switched back to Guake which is more stable.&lt;/p>
&lt;p>Installing Guake could not be more simple. Drop into a terminal and type:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo apt-get install guake
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the installation finishes, Guake will be in your applications. The next thing you will want to do is to add Guake to your startup applications. Open your applications and search for startup. When the GUI opens, click &amp;ldquo;Add&amp;rdquo; then in the &amp;ldquo;Name&amp;rdquo; field type Guake and in the &amp;ldquo;Command&amp;rdquo; field type &lt;code>guake&lt;/code>. That's it. Next time you login Guake is ready for you. If you want to start guake without logging out and back in, go to your applications and search for guake and start guake terminal. Now you have your initial setup.&lt;/p>
&lt;p>Guake and Gnome Terminal (what you get when you type &lt;code>ctrl+alt+t&lt;/code>) both are simply terminals. They are like a portal to your shell program. Your shell program is distinct from you terminal program. You can use a terminal to run almost any shell program that you like. Shell programs live &amp;ldquo;below&amp;rdquo; your terminal in the stack between your eyeballs and your computer's processor. So with the same terminal, you can use different shells.&lt;/p>
&lt;h2 id="shell-programs">Shell Programs&lt;/h2>
&lt;p>Ubuntu's default shell (and indeed many the default shell for many POSIX systems) is &lt;code>bash&lt;/code>. Bash is a good shell. Personally, I do not use it. I use &lt;code>zsh&lt;/code> mainly because its community has a ton of plugins and installation scripts which I have used to automate the installation of my luxurious shell setup. There is a long history of (ahem) discourse between the supporters of the two shells and you can google to find it. Of course, POSIX being POSIX there are numerous other options such as fish shell and other newer competitors to bash and zsh. My recommendation is to use the shell that works for you and lets you do what you need to do in the most efficient way possible.&lt;/p>
&lt;p>Ubuntu tries to keep its install wizards small so it does not install zsh by default (OSX on the other hand does I'm fairly sure), so if you want to follow the rest of this tutorial then you'll want to install zsh with the following command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo apt-get install zsh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the shell is installed then you need to tell Ubuntu that this is the shell you are interested in installing. You do this with two commands. The first command finds where the zsh binary is and the second tells Ubuntu to change your shell. You copy the output from the first command (&lt;code>ctrl+shift+c&lt;/code> when you're in terminal) and paste it into the second command (&lt;code>ctrl+shift+v&lt;/code> when you're in terminal).&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ which zsh
$ chsh -s $OUTPUT $USER
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above command $OUTPUT is the output you get from the first command and $USER is your user name on ubuntu. After that you are all set. What I do generally at this point is to close the terminal window (in Guake this is &lt;code>ctrl+shift+w&lt;/code> but that may be what I've set up to follow Chrome rather than the standard) and then open a new terminal window. Voila, you are all set up with zsh.&lt;/p>
&lt;h2 id="making-your-shell-your-shell">Making Your Shell YOUR Shell&lt;/h2>
&lt;p>Now we have all the basics setup with three simple commands in the terminal. You can easily put these into your install script to automate this process whenever you install or reinstall Linux on your machine. The next step is to make the shell YOUR shell by personalizing it.&lt;/p>
&lt;p>The main file you will use to personalize the shell is your &lt;code>~/.zshrc&lt;/code>. This is the file that zsh will automatically load by default everytime a new instance of zsh is opened. You can use this file in turn to tell zsh to load other files as we will see. The reason why I like zsh is that there are a lot of plugin which you can use to make the shell your own in a very simple way. A while ago a framework for zsh was developed called &lt;a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh&lt;/a> which kicked off the frameworks in zsh in a big way. After a while this became complicated so another team developed a system which automated how this all works.&lt;/p>
&lt;p>I use both of these systems. I use the automated install and updating system to install, remove, and update my zsh files and I use oh-my-zsh as the underlying framework (which I modify) to do much of the heavy lifting. If you want to follow along it will not be very painful I promise. The automatic installation and updater I use is called &lt;a href="https://github.com/zsh-users/antigen">antigen&lt;/a>. Here is how you set it up.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo apt-get install git
$ git clone https://github.com/zsh-users/antigen.git $LOCATION
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When you run the git clone command it will pull down antigen but you will want to put it in whatever location you like. I do not recommend putting it in &lt;code>~/.antigen&lt;/code> because when you run the script it is going to put a bunch of other files in that location and this could cause conflicts. I put it in my &lt;code>~/coding/antigen&lt;/code> folder for instance. Now, when that finished you need to edit your .zshrc file in your favorite text editor. Here's what my file looks like.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#!/usr/bin/env zsh
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e"># Antigen bundles&lt;/span>
source ~/coding/antigen/antigen.zsh
antigen use oh-my-zsh
antigen bundles &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOBUNDLES
&lt;/span>&lt;span style="color:#e6db74">bower
&lt;/span>&lt;span style="color:#e6db74">colorize
&lt;/span>&lt;span style="color:#e6db74">colored-man
&lt;/span>&lt;span style="color:#e6db74">cp
&lt;/span>&lt;span style="color:#e6db74">debian
&lt;/span>&lt;span style="color:#e6db74">extract
&lt;/span>&lt;span style="color:#e6db74">gem
&lt;/span>&lt;span style="color:#e6db74">github
&lt;/span>&lt;span style="color:#e6db74">heroku
&lt;/span>&lt;span style="color:#e6db74">npm
&lt;/span>&lt;span style="color:#e6db74">pip
&lt;/span>&lt;span style="color:#e6db74">rails
&lt;/span>&lt;span style="color:#e6db74">rsync
&lt;/span>&lt;span style="color:#e6db74">ruby
&lt;/span>&lt;span style="color:#e6db74">rvm
&lt;/span>&lt;span style="color:#e6db74">sublime
&lt;/span>&lt;span style="color:#e6db74">vundle
&lt;/span>&lt;span style="color:#e6db74">zsh-users/zsh-syntax-highlighting
&lt;/span>&lt;span style="color:#e6db74">zsh-users/zsh-completions src
&lt;/span>&lt;span style="color:#e6db74">EOBUNDLES&lt;/span>
&lt;span style="color:#75715e">#Now load the theme&lt;/span>
antigen theme ~/Dropbox/Dot-Files/zsh-themes/csk-compact.zsh-theme
antigen apply
&lt;span style="color:#75715e">#Now load the custom files&lt;/span>
source ~/Dropbox/Dot-Files/zsh-plugins/conf.zsh
source ~/Dropbox/Dot-Files/zsh-plugins/git-csk.plugin.zsh
source ~/Dropbox/Dot-Files/zsh-plugins/funcs.zsh
source ~/Dropbox/Dot-Files/zsh-plugins/aliases.zsh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can read more about how to use antigen bundles on their github page linked to above, but I'll walk through it. The first thing that the file does is it &lt;code>sources&lt;/code> (which in shell means load and use) the main antigen shell script. So point this to wherever you cloned their repo to. The next line tells antigen to use the oh-my-zsh framework (there are others which you could use and the github page shows how to do that). Then there is a long list of the bundles that I want to use. Bundles are simply plugins. At the end you will see a couple of non oh-my-zsh bundles sourced. Antigen knows that when you put a bundle that looks like &lt;code>user/plugin&lt;/code> to get it from the github repo. Of course, you can not use the github defaults and you can easily point it to other bundles that you may have on a private git repo.&lt;/p>
&lt;p>After the bundles are loaded then the file tells antigen to use a specific theme. The last thing the file does is to tell zsh to load a bunch of custom files which I keep in my dropbox. That's it. The way that zsh works is that when you pass it one command and then pass it a second command that conflicts with the first then the second one always wins. This is why I source my own custom files after the framework files. This allows me to override small things that the framework does which I do not like.&lt;/p>
&lt;p>You can look on oh-my-zsh page for a lot of different themes. Here's the theme I use.&lt;/p>
&lt;p>My theme tells me my username, hostname, current working directory and then tells me which rvm I'm using and how my git repo is looking (the git repo turns red if it is &amp;lsquo;dirty&amp;rsquo; or green if it is not as you can see from the different repos). If you wanted to use my theme then here is the file:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ZSH_THEME_GIT_PROMPT_PREFIX&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%{&lt;/span>$reset_color&lt;span style="color:#e6db74">%}[%{&lt;/span>$fg&lt;span style="color:#e6db74">[magenta]%}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
ZSH_THEME_GIT_PROMPT_SUFFIX&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%{&lt;/span>$reset_color&lt;span style="color:#e6db74">%}]&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
ZSH_THEME_GIT_PROMPT_DIRTY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%{&lt;/span>$fg&lt;span style="color:#e6db74">[red]%}☿☿☿&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
ZSH_THEME_GIT_PROMPT_CLEAN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%{&lt;/span>$fg&lt;span style="color:#e6db74">[green]%}☿☿☿&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local whoami&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%{&lt;/span>$fg&lt;span style="color:#e6db74">[magenta]%}%n%{&lt;/span>$reset_color&lt;span style="color:#e6db74">%}@%{&lt;/span>$fg&lt;span style="color:#e6db74">[green]%}%m%{&lt;/span>$reset_color&lt;span style="color:#e6db74">%}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local whereami&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">:%{&lt;/span>$fg_bold&lt;span style="color:#e6db74">[blue]%}%~%{&lt;/span>$reset_color&lt;span style="color:#e6db74">%}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local git_branch&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\$(git_prompt_info)&amp;#34;&lt;/span>
local rvm_ruby&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">[%{&lt;/span>$reset_color&lt;span style="color:#e6db74">%}%{&lt;/span>$fg&lt;span style="color:#e6db74">[cyan]%}\$(~/.rvm/bin/rvm-prompt v g)%{&lt;/span>$reset_color&lt;span style="color:#e6db74">%}]&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
PROMPT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>whoami&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>whereami&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>rvm_ruby&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>git_branch&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &amp;gt;&amp;gt; &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
RPROMPT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;%{$fg[yellow]%}[%*]%{$reset_color%}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>On my servers I do not typically install Ruby Version Manager (rvm) and the result is that this theme will throw an error which is annoying, so on my servers I use a very slightly modified theme which I would recommend if you do not use ruby a lot. One thing to note is that the colors in the server theme are bolded (this makes it easy for me to remember that I am probably ssh'ing into a server in a specific terminal and not on my computer if you did not want the bold them simply delete &amp;lsquo;_bold&amp;rsquo;).&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ZSH_THEME_GIT_PROMPT_PREFIX&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%{&lt;/span>$reset_color&lt;span style="color:#e6db74">%}[%{&lt;/span>$fg&lt;span style="color:#e6db74">[magenta]%}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
ZSH_THEME_GIT_PROMPT_SUFFIX&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%{&lt;/span>$reset_color&lt;span style="color:#e6db74">%}]&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
ZSH_THEME_GIT_PROMPT_DIRTY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%{&lt;/span>$fg&lt;span style="color:#e6db74">[red]%}☿☿☿&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
ZSH_THEME_GIT_PROMPT_CLEAN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%{&lt;/span>$fg&lt;span style="color:#e6db74">[green]%}☿☿☿&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local whoami&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%{&lt;/span>$fg_bold&lt;span style="color:#e6db74">[green]%}%n%{&lt;/span>$reset_color&lt;span style="color:#e6db74">%}@%{&lt;/span>$fg_bold&lt;span style="color:#e6db74">[magenta]%}%m%{&lt;/span>$reset_color&lt;span style="color:#e6db74">%}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local whereami&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">:%{&lt;/span>$fg_bold&lt;span style="color:#e6db74">[cyan]%}%~%{&lt;/span>$reset_color&lt;span style="color:#e6db74">%}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local git_branch&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\$(git_prompt_info)&amp;#34;&lt;/span>
PROMPT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>whoami&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>whereami&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>git_branch&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &amp;gt;&amp;gt; &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
RPROMPT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;%{$fg[yellow]%}[%*]%{$reset_color%}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The next custom file my &lt;code>.zshrc&lt;/code> file sources is my configuration file. This is full of a bunch of defaults I've found by stalking people's dot file repos on github. To be honest there is a lot of things in this file that I do not know what they do but solve specific problems for me. I recommend using one you find from repos and then googling as different problems arise and adding or deleting the specific parts of the config file to make it yours. That is more or less what I have done over the previous few years.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># Key bindings&lt;/span>
bindkey -M viins &lt;span style="color:#e6db74">&amp;#39;^[OH&amp;#39;&lt;/span> vi-beginning-of-line &lt;span style="color:#75715e"># home key&lt;/span>
bindkey -M viins &lt;span style="color:#e6db74">&amp;#39;^[OF&amp;#39;&lt;/span> vi-end-of-line &lt;span style="color:#75715e"># end key&lt;/span>
bindkey -M viins &lt;span style="color:#e6db74">&amp;#39;\e[3~&amp;#39;&lt;/span> vi-delete-char &lt;span style="color:#75715e"># use delete as forward delete&lt;/span>
bindkey -M viins &lt;span style="color:#e6db74">&amp;#39;^B&amp;#39;&lt;/span> push-line-or-edit &lt;span style="color:#75715e"># line buffer&lt;/span>
bindkey &lt;span style="color:#e6db74">&amp;#39;^[^[[C&amp;#39;&lt;/span> forward-word
bindkey &lt;span style="color:#e6db74">&amp;#39;^[^[[D&amp;#39;&lt;/span> backward-word
&lt;span style="color:#75715e"># Shut up.&lt;/span>
setopt NO_BEEP
setopt nullglob
&lt;span style="color:#75715e"># Changing Directories&lt;/span>
setopt AUTO_CD
setopt CDABLE_VARS
setopt AUTO_PUSHD
&lt;span style="color:#75715e"># History&lt;/span>
setopt HIST_SAVE_NO_DUPS
setopt HIST_VERIFY
setopt HIST_IGNORE_ALL_DUPS
setopt EXTENDED_HISTORY
setopt HIST_REDUCE_BLANKS
bindkey &lt;span style="color:#e6db74">&amp;#34;^R&amp;#34;&lt;/span> history-incremental-pattern-search-backward
bindkey &lt;span style="color:#e6db74">&amp;#34;^S&amp;#34;&lt;/span> history-incremental-pattern-search-forward
&lt;span style="color:#75715e"># Resume vim after ctrl+z accidentally (or intentionally!) from vim&lt;/span>
&lt;span style="color:#75715e"># just ctrl+z again to resume&lt;/span>
foreground-vi&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
fg %vi
&lt;span style="color:#f92672">}&lt;/span>
zle -N foreground-vi
bindkey &lt;span style="color:#e6db74">&amp;#39;^Z&amp;#39;&lt;/span> foreground-vi
&lt;span style="color:#75715e">#apt-pref&lt;/span>
apt_pref&lt;span style="color:#f92672">=&lt;/span>apt-get
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The next file sourced is a custom git alias file which I use. It is not terribly interesting but it makes things easier for me to remember because the oh-my-zsh git bundle kept changing for a while and I think of things slightly differently than they do so I just override a lot of their defaults which is fine.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># Aliases&lt;/span>
alias git&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;hub&amp;#39;&lt;/span>
alias g&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git&amp;#39;&lt;/span>
compdef g&lt;span style="color:#f92672">=&lt;/span>git
alias ga&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git add&amp;#39;&lt;/span>
compdef _git ga&lt;span style="color:#f92672">=&lt;/span>git-add
alias gaa&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git add -A&amp;#39;&lt;/span>
compdef _git gaa&lt;span style="color:#f92672">=&lt;/span>git-add
alias gai&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git add -i&amp;#39;&lt;/span>
compdef _git gai&lt;span style="color:#f92672">=&lt;/span>git-add
alias gb&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git branch&amp;#39;&lt;/span>
compdef _git gb&lt;span style="color:#f92672">=&lt;/span>git-branch
alias gba&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git branch -a&amp;#39;&lt;/span>
compdef _git gba&lt;span style="color:#f92672">=&lt;/span>git-branch
alias gbav&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git branch -a -vv&amp;#39;&lt;/span>
compdef _git gbav&lt;span style="color:#f92672">=&lt;/span>git-branch
alias gc&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git commit -v&amp;#39;&lt;/span>
compdef _git gc&lt;span style="color:#f92672">=&lt;/span>git-commit
alias gca&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git commit -v -a&amp;#39;&lt;/span>
compdef _git gca&lt;span style="color:#f92672">=&lt;/span>git-commit
alias gc!&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git commit -v --amend&amp;#39;&lt;/span>
compdef _git gc!&lt;span style="color:#f92672">=&lt;/span>git-commit
alias gcm&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git commit -m&amp;#39;&lt;/span>
compdef _git gcam&lt;span style="color:#f92672">=&lt;/span>git-commit
alias gco&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git checkout&amp;#39;&lt;/span>
compdef _git gco&lt;span style="color:#f92672">=&lt;/span>git-checkout
alias gcob&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git checkout -b&amp;#39;&lt;/span>
compdef _git gcob&lt;span style="color:#f92672">=&lt;/span>git-checkout
alias gcom&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git checkout master&amp;#39;&lt;/span>
compdef _git gcom&lt;span style="color:#f92672">=&lt;/span>git-checkout
alias gd&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git diff&amp;#39;&lt;/span>
compdef _git gd&lt;span style="color:#f92672">=&lt;/span>git-diff
alias gds&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git diff --cached&amp;#39;&lt;/span>
compdef _git gds&lt;span style="color:#f92672">=&lt;/span>git-diff
alias gdh&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git diff HEAD&amp;#39;&lt;/span>
compdef _git gdh&lt;span style="color:#f92672">=&lt;/span>git-diff
alias gdelcom&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git reset --hard HEAD~&amp;#39;&lt;/span>
alias gl&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;git log --graph --pretty=format:&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%an %cr)%Creset&amp;#39; --abbrev-commit --date=relative&amp;#34;&lt;/span>
alias glp&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;gl -p&amp;#39;&lt;/span>
alias gl1&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;gl --pretty=oneline --abbrev-commit --decorate&amp;#39;&lt;/span>
alias glg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git log --stat --max-count=5&amp;#39;&lt;/span>
alias glt&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;gl | tig&amp;#39;&lt;/span>
alias glu&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git ls-files --other --exclude-standard&amp;#39;&lt;/span>
alias glud&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git ls-files --other --exclude-standard | xargs rm&amp;#39;&lt;/span>
alias glua&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git ls-files --other --exclude-standard | xargs git add&amp;#39;&lt;/span>
alias grma&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git ls-files --deleted | xargs git rm&amp;#39;&lt;/span>
alias gcount&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git shortlog -sn&amp;#39;&lt;/span>
alias gm&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git merge&amp;#39;&lt;/span>
compdef _git gm&lt;span style="color:#f92672">=&lt;/span>git-merge
alias gpl&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git pull --rebase&amp;#39;&lt;/span>
compdef _git gpl&lt;span style="color:#f92672">=&lt;/span>git-pull
alias gup&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git fetch &amp;amp;&amp;amp; git rebase&amp;#39;&lt;/span>
compdef _git gup&lt;span style="color:#f92672">=&lt;/span>git-fetch
alias gps&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git push&amp;#39;&lt;/span>
compdef _git gps&lt;span style="color:#f92672">=&lt;/span>git-push
alias gr&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git remote&amp;#39;&lt;/span>
compdef _git gr&lt;span style="color:#f92672">=&lt;/span>git-remote
alias grv&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git remote -v&amp;#39;&lt;/span>
compdef _git grv&lt;span style="color:#f92672">=&lt;/span>git-remote
alias grall&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git remote -v show -n&amp;#39;&lt;/span>
compdef _git grall&lt;span style="color:#f92672">=&lt;/span>git-remote
alias grset&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git remote set-url&amp;#39;&lt;/span>
compdef _git grset&lt;span style="color:#f92672">=&lt;/span>git-remote
alias grb&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git rebase&amp;#39;&lt;/span>
compdef _git grb&lt;span style="color:#f92672">=&lt;/span>git-rebase
alias grba&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git rebase --abort&amp;#39;&lt;/span>
compdef _git grba&lt;span style="color:#f92672">=&lt;/span>git-rebase
alias grbc&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git rebase --continue&amp;#39;&lt;/span>
compdef _git grbc&lt;span style="color:#f92672">=&lt;/span>git-rebase
alias grm&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;git status | grep deleted | awk &amp;#39;{\$1=\$2=\&amp;#34;\&amp;#34;; print \$0}&amp;#39; | \
&lt;/span>&lt;span style="color:#e6db74"> perl -pe &amp;#39;s/^[ \t]*//&amp;#39; | sed &amp;#39;s/ /\\\\ /g&amp;#39; | xargs git rm&amp;#34;&lt;/span>
alias grmd&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;git status | grep deleted | awk &amp;#39;{\$1=\$2=\&amp;#34;\&amp;#34;; print \$0}&amp;#39; | \
&lt;/span>&lt;span style="color:#e6db74"> perl -pe &amp;#39;s/^[ \t]*//&amp;#39; | sed &amp;#39;s/ /\\\\ /g&amp;#39; | xargs git rm -rf&amp;#34;&lt;/span>
alias gs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git status&amp;#39;&lt;/span>
compdef _git gs&lt;span style="color:#f92672">=&lt;/span>git-status
alias gss&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git status -s&amp;#39;&lt;/span>
compdef _git gss&lt;span style="color:#f92672">=&lt;/span>git-status
alias gst&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git stash&amp;#39;&lt;/span>
alias gsta&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;gst apply&amp;#39;&lt;/span>
alias gundo&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git reset --soft HEAD^&amp;#39;&lt;/span>
alias gundoh&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git reset HEAD&amp;#39;&lt;/span>
alias gundohh&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git reset HEAD --hard&amp;#39;&lt;/span>
alias gwtfl&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git wtf -l -a -A -r&amp;#39;&lt;/span>
alias tigb&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;tig blame&amp;#39;&lt;/span>
alias tigs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;tig status&amp;#39;&lt;/span>
&lt;span style="color:#75715e"># Will return the current branch name&lt;/span>
&lt;span style="color:#75715e"># Usage example: git pull origin $(current_branch)&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> current_branch&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
ref&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>git symbolic-ref HEAD 2&amp;gt; /dev/null&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span>
echo &lt;span style="color:#e6db74">${&lt;/span>ref#refs/heads/&lt;span style="color:#e6db74">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> current_repository&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
ref&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>git symbolic-ref HEAD 2&amp;gt; /dev/null&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span>
echo &lt;span style="color:#66d9ef">$(&lt;/span>git remote -v | cut -d&lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> -f 2&lt;span style="color:#66d9ef">)&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e"># these aliases take advantage of the previous function&lt;/span>
alias push&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git push github $(current_branch) &amp;amp;&amp;amp; git push wsl $(current_branch)&amp;#39;&lt;/span>
alias pushpriv&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git push wsl $(current_branch)&amp;#39;&lt;/span>
alias pushprod&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git push gandi master&amp;#39;&lt;/span>
alias pushroku&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git push heroku master&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> gtb&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
git checkout -b $1 --track $2/$1
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> gtrack&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
branch&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>git rev-parse --abbrev-ref HEAD&lt;span style="color:#66d9ef">)&lt;/span>
git branch -u $1/$branch $branch
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> gnuke&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> ! -d .git &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Error: must run this script from the root of a git repository&amp;#34;&lt;/span>
exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#75715e"># remove all paths passed as arguments from the history of the repo&lt;/span>
files&lt;span style="color:#f92672">=&lt;/span>$@
git filter-branch --index-filter &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">git rm -rf --cached --ignore-unmatch &lt;/span>$files&lt;span style="color:#e6db74">&amp;#34;&lt;/span> HEAD
&lt;span style="color:#75715e"># remove the temporary history git-filter-branch otherwise leaves behind for a long time&lt;/span>
rm -rf .git/refs/original/ &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> git reflog expire --all &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> git gc --aggressive --prune
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That file I've assembled over the years and to be honest I use maybe 60% of the aliases and functions in it, but the good thing is that when I'm trying to remember how to do something I just pull up that file and it is likely in there. It is probably overkill but it can be useful from time to time.&lt;/p>
&lt;p>Next I source my custom functions files. This is a fun one that allows me to do a bit of coding in zsh and put these into my shell for easy use in the future. I use a lot fo these functions quite frequently.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">## Process/System functions&lt;/span>
&lt;span style="color:#75715e">##&lt;/span>
&lt;span style="color:#75715e">#helper for pp&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> my_ps&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ; &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#do i own this process?&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> pp&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> my_ps f | awk &lt;span style="color:#e6db74">&amp;#39;!/awk/ &amp;amp;&amp;amp; $0~var&amp;#39;&lt;/span> var&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#66d9ef">:-&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.*&amp;#34;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span> ; &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#install packages and log&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> install&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
packages&lt;span style="color:#f92672">=&lt;/span>$@
sudo apt-get install &lt;span style="color:#e6db74">${&lt;/span>=packages&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$packages&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.installd
&lt;span style="color:#f92672">}&lt;/span>
apt_pref_compdef install &lt;span style="color:#e6db74">&amp;#34;install&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> add-repo&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
repos&lt;span style="color:#f92672">=&lt;/span>$@
sudo add-apt-repository -y ppa:&lt;span style="color:#e6db74">${&lt;/span>=repos&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">sudo add-apt-repository -y ppa:&lt;/span>$repos&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.installd
sudo apt-get update
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#colorize man output ... http://www.cyberciti.biz/faq/linux-unix-colored-man-pages-with-less-command/&lt;/span>
man&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
env &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> LESS_TERMCAP_mb&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>printf &lt;span style="color:#e6db74">&amp;#34;\e[1;31m&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> LESS_TERMCAP_md&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>printf &lt;span style="color:#e6db74">&amp;#34;\e[1;31m&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> LESS_TERMCAP_me&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>printf &lt;span style="color:#e6db74">&amp;#34;\e[0m&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> LESS_TERMCAP_se&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>printf &lt;span style="color:#e6db74">&amp;#34;\e[0m&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> LESS_TERMCAP_so&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>printf &lt;span style="color:#e6db74">&amp;#34;\e[1;44;33m&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> LESS_TERMCAP_ue&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>printf &lt;span style="color:#e6db74">&amp;#34;\e[0m&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> LESS_TERMCAP_us&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>printf &lt;span style="color:#e6db74">&amp;#34;\e[1;32m&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> man &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$@&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">## Networking functions&lt;/span>
&lt;span style="color:#75715e">##&lt;/span>
&lt;span style="color:#75715e">#get my ip&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> myip-local&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
IP&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>ifconfig | grep &lt;span style="color:#e6db74">&amp;#39;inet addr:&amp;#39;&lt;/span>| grep -v &lt;span style="color:#e6db74">&amp;#39;127.0.0.1&amp;#39;&lt;/span> | cut -d: -f2 | awk &lt;span style="color:#e6db74">&amp;#39;{ print $1}&amp;#39;&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>;
echo $IP
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> myip-global&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
dig +short myip.opendns.com @resolver1.opendns.com
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> myips&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
echo -e &lt;span style="color:#e6db74">&amp;#34;\nMy Local IPs:\n\033[1;32m`myip-local`\033[m&amp;#34;&lt;/span>
echo -e &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">\nMy External IPs:\n\033[1;32m`myip-global`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>NC&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">\033[m\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> funsa&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
sudo ifconfig eth0 down
sudo macchanger -r eth0
sudo ifconfig eth0 up
sudo ifconfig wlan0 down
sudo macchanger -r wlan0
sudo ifconfig wlan0 up
google-chrome &lt;span style="color:#e6db74">&amp;#34;file:///home/coda/Dropbox/Chrome-Extensions/Source%20Codes/funsa.html&amp;#34;&lt;/span>
sudo service network-manager restart
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#summarize current network situation&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> ii&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
echo -e &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">\nYou are logged on &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>BLUE&lt;span style="color:#e6db74">}&lt;/span>$HOSTNAME&lt;span style="color:#e6db74">${&lt;/span>NC&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
echo -e &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">\nAdditionnal information:&lt;/span>$NC&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> ; uname -a
echo -e &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">\n&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>RED&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">Users logged on:&lt;/span>$NC&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> ; w -h
echo -e &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">\n&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>RED&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">Current date :&lt;/span>$NC&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> ; date
echo -e &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">\n&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>RED&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">Machine stats :&lt;/span>$NC&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> ; uptime
echo -e &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">\n&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>RED&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">Memory stats :&lt;/span>$NC&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> ; free
myip &amp;gt; /dev/null 2&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">1&lt;/span>
echo -e &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">\n&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>RED&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">Local IP Address :&lt;/span>$NC&lt;span style="color:#e6db74">&amp;#34;&lt;/span> ; echo &lt;span style="color:#e6db74">${&lt;/span>IP&lt;span style="color:#66d9ef">:-&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Not connected&amp;#34;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>
echo
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">## Files and Directories&lt;/span>
&lt;span style="color:#75715e">##&lt;/span>
&lt;span style="color:#75715e">#special file create&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> touch &lt;span style="color:#f92672">{&lt;/span>
dir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>expr &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#39;\(.*\/\)&amp;#39;&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> $dir &lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#66d9ef">then&lt;/span>
mkdir -p $dir
&lt;span style="color:#66d9ef">fi&lt;/span>
/usr/bin/touch $1
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#home folder&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> h
&lt;span style="color:#f92672">{&lt;/span>
cd ~/$1;
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#find a file with the string in the name&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> ff&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> find . -name &lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span> ; &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#find a file with the string in the name and exec $2 on it&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> fe&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> find . -name &lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span> -exec $2 &lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#ae81ff">\;&lt;/span> ; &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#find a file ending in $2 and search for string $1 in it&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> fstr&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#75715e"># find a string in a set of files&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> $# -ne &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Usage: fstr \&amp;#34;pattern\&amp;#34; [files] &amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span>;
&lt;span style="color:#66d9ef">fi&lt;/span>
SMSO&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>tput smso&lt;span style="color:#66d9ef">)&lt;/span>
RMSO&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>tput rmso&lt;span style="color:#66d9ef">)&lt;/span>
find . -type f -name &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">*&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>2&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -print | xargs grep -sin &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> sed &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">s/&lt;/span>$1&lt;span style="color:#e6db74">/&lt;/span>$SMSO$1$RMSO&lt;span style="color:#e6db74">/gI&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#remove spaces from filename&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> nospace&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
mv &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">`echo &lt;/span>$1&lt;span style="color:#e6db74"> | tr &amp;#39; &amp;#39; &amp;#39;_&amp;#39;`&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#filenames to lowercase&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> lowercase&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> file ; &lt;span style="color:#66d9ef">do&lt;/span>
filename&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>file##*/&lt;span style="color:#e6db74">}&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$filename&lt;span style="color:#e6db74">&amp;#34;&lt;/span> in
*/*&lt;span style="color:#f92672">)&lt;/span> dirname&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>file%/*&lt;span style="color:#e6db74">}&lt;/span> ;;
*&lt;span style="color:#f92672">)&lt;/span> dirname&lt;span style="color:#f92672">=&lt;/span>.;;
&lt;span style="color:#66d9ef">esac&lt;/span>
nf&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>echo $filename | tr A-Z a-z&lt;span style="color:#66d9ef">)&lt;/span>
newname&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>dirname&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>nf&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$nf&lt;span style="color:#e6db74">&amp;#34;&lt;/span> !&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$filename&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
mv &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$file&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$newname&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">lowercase: &lt;/span>$file&lt;span style="color:#e6db74"> not changed.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#66d9ef">done&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">## Get the commands and aliases&lt;/span>
&lt;span style="color:#75715e">##&lt;/span>
&lt;span style="color:#75715e">#list all the aliases&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> list_aliases
&lt;span style="color:#f92672">{&lt;/span>
ALIASES&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>alias | cut -d &lt;span style="color:#e6db74">&amp;#39;=&amp;#39;&lt;/span> -f 1&lt;span style="color:#e6db74">`&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$ALIASES&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | sort -u
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#list all the commands&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> list_commands
&lt;span style="color:#f92672">{&lt;/span>
COMMANDS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>echo -n $PATH | xargs -d : -I &lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#f92672">}&lt;/span> find &lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#f92672">}&lt;/span> -maxdepth &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -executable -type f -printf &lt;span style="color:#e6db74">&amp;#39;%P\n&amp;#39;&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$COMMANDS&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | sort -u
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#find an alias&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> lag
&lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> a in &lt;span style="color:#66d9ef">$(&lt;/span>list_aliases | grep $1&lt;span style="color:#66d9ef">)&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span> which $a; &lt;span style="color:#66d9ef">done&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#find a command&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> lcg
&lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> c in &lt;span style="color:#66d9ef">$(&lt;/span>list_commands | grep $1&lt;span style="color:#66d9ef">)&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span> which $c; &lt;span style="color:#66d9ef">done&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">## Git &amp;amp; Deployment&lt;/span>
&lt;span style="color:#75715e">##&lt;/span>
&lt;span style="color:#75715e">#ship the current branch&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> ship&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
CURRENT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>git branch | grep &lt;span style="color:#e6db74">&amp;#39;\*&amp;#39;&lt;/span> | awk &lt;span style="color:#e6db74">&amp;#39;{print $2}&amp;#39;&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
git checkout master
git merge &lt;span style="color:#e6db74">${&lt;/span>CURRENT&lt;span style="color:#e6db74">}&lt;/span>
git push github master
git push wsl master
git checkout &lt;span style="color:#e6db74">${&lt;/span>CURRENT&lt;span style="color:#e6db74">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">## Application Specific&lt;/span>
&lt;span style="color:#75715e">##&lt;/span>
&lt;span style="color:#75715e">#use hub browser to get at the github and shut chrome up&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> gbrow&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
git browse $@ &amp;amp;&amp;gt;/dev/null;
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#cabal updater&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> cabal-upgrade&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
cabal update;
cabal list --simple-output --installed | awk &lt;span style="color:#e6db74">&amp;#39;{print $1}&amp;#39;&lt;/span> | uniq | xargs -I &lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#f92672">}&lt;/span> cabal install &lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#f92672">}&lt;/span>;
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#npm global installer&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> npmig&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
packages&lt;span style="color:#f92672">=&lt;/span>$@
sudo npm install -g &lt;span style="color:#e6db74">${&lt;/span>=packages&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">npm &lt;/span>$packages&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.installd
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some highlights of this file include an installation script which allows me to both install a package from apt-get and also to lot that in my install script so that I can then remember to reinstall it on a new system. I also have a collateral package for installing new ppas on my computer. I have built a bunch of network functions that I use every once in a while to figure out what the heck is happening. I also have built a f-u-nsa script which I run when I get to a new country. By changing my mac address and clearing all my cookies I think I can slightly reduce my chances of being flagged within NSA's systems &amp;ndash; this is important when you run a law firm and spend lots of time in the Horn of Africa. Also I have some functions that make working with files and modifying files easier as well as a few specific functions for assisting with different programs like npm (node package manager and cabal which is haskell's package manager and I use to keep on the bleeding edge of pandoc).&lt;/p>
&lt;p>Lastly my &lt;code>.zshrc&lt;/code> file sources my aliases which are below and not terribly interesting.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#!/usr/bin/env zsh
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e"># zsh aliases&lt;/span>
&lt;span style="color:#75715e"># included by .zshrc, this is for my custom aliases&lt;/span>
&lt;span style="color:#75715e"># allow aliases to be sudoed&lt;/span>
alias sudo&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;nocorrect sudo&amp;#39;&lt;/span>
&lt;span style="color:#75715e"># Set Colors in Terms &amp;amp; Dumb Terms&lt;/span>
eval &lt;span style="color:#66d9ef">$(&lt;/span>dircolors&lt;span style="color:#66d9ef">)&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$TERM&lt;span style="color:#e6db74">&amp;#34;&lt;/span> !&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;dumb&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
eval &lt;span style="color:#e6db74">&amp;#34;`dircolors -b`&amp;#34;&lt;/span>
alias ls&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ls --color=always&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#75715e"># Directory &amp;amp; File Management&lt;/span>
alias ll&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ls -l&amp;#39;&lt;/span>
alias la&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ls -A&amp;#39;&lt;/span>
alias l&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ls -G&amp;#39;&lt;/span>
alias lla&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ls -la&amp;#39;&lt;/span>
alias cat&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;colorize&amp;#39;&lt;/span>
alias grep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;grep --color&amp;#39;&lt;/span>
alias grepi&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;grep --color -i&amp;#39;&lt;/span>
alias mkdir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;mkdir -p&amp;#39;&lt;/span>
alias less&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;less --raw-control-chars&amp;#39;&lt;/span>
&lt;span style="color:#75715e"># EDiTor &amp;amp; Clipboard stuff&lt;/span>
alias e&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;vim&amp;#39;&lt;/span>
alias se&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;sudo vim&amp;#39;&lt;/span>
alias pbcopy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;xclip -selection clipboard&amp;#39;&lt;/span>
alias pbpaste&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;xclip -selection clipboard -o&amp;#39;&lt;/span>
&lt;span style="color:#75715e"># show sorted directory sizes for all directories&lt;/span>
alias duh&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;du -s ~/* | cut -f1 | spark &amp;amp;&amp;amp; du -sch ~/*&amp;#39;&lt;/span>
alias duhere&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;du -s ./* | cut -f1 | spark &amp;amp;&amp;amp; du -sch ./*&amp;#39;&lt;/span>
alias dua&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;du --max-depth=1 ~ | cut -f1 | spark &amp;amp;&amp;amp; du -ch --max-depth=1 ~&amp;#39;&lt;/span>
alias dfh&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;df -h&amp;#39;&lt;/span>
&lt;span style="color:#75715e"># system monitoring &amp;amp; updating&lt;/span>
alias dpkgl&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;dpkg -l | grep&amp;#34;&lt;/span>
alias psg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ps auxf | grep&amp;#39;&lt;/span>
alias local_ports&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;sudo nmap -sT -O localhost&amp;#39;&lt;/span>
alias traffic&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;sudo tcpdump -i wlan0 -n -s0 -e&amp;#34;&lt;/span>
alias adga&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;adg &amp;amp;&amp;amp; sudo npm update -g &amp;amp;&amp;amp; antigen update &amp;amp;&amp;amp; vundle-update &amp;amp;&amp;amp; rvm use 2.0.0@global &amp;amp;&amp;amp; gemup &amp;amp;&amp;amp; gem cleanup &amp;amp;&amp;amp; cabal-upgrade&amp;#34;&lt;/span>
alias acr&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">aac &amp;amp;&amp;amp; sudo &lt;/span>$apt_pref&lt;span style="color:#e6db74"> -y autoremove&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
alias aps&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;apt-cache search&amp;#34;&lt;/span>
alias apsw&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;apt-cache show&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Ruby&lt;/span>
alias b&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bundle exec&amp;#39;&lt;/span>
alias bi&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bundle install&amp;#39;&lt;/span>
alias br&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bundle exec rake&amp;#39;&lt;/span>
alias birb&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bundle exec irb&amp;#39;&lt;/span>
alias lr&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;rake -T&amp;#39;&lt;/span>
alias tests&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bundle exec rake test&amp;#39;&lt;/span>
alias gemi&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;gem install --no-rdoc --no-ri&amp;#39;&lt;/span>
alias geml&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;gem list&amp;#39;&lt;/span>
alias gemla&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;gem list -a&amp;#39;&lt;/span>
alias gemun&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;gem uninstall&amp;#39;&lt;/span>
compdef _gem_installed gemun&lt;span style="color:#f92672">=&lt;/span>installed_gems
alias gemup&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;gem update --no-rdoc --no-ri&amp;#39;&lt;/span>
compdef _gem_installed gemup&lt;span style="color:#f92672">=&lt;/span>installed_gems
&lt;span style="color:#75715e"># Node&lt;/span>
alias npmi&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;npm install --save&amp;#39;&lt;/span>
alias npml&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;npm list&amp;#39;&lt;/span>
alias npmla&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;npm list --global&amp;#39;&lt;/span>
alias npms&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;npm search&amp;#39;&lt;/span>
alias npmsw&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;npm show&amp;#39;&lt;/span>
alias npmup&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;npm update&amp;#39;&lt;/span>
alias npmun&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;npm uninstall --save&amp;#39;&lt;/span>
alias bower&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;noglob bower&amp;#39;&lt;/span>
alias bowi&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bower install --save&amp;#39;&lt;/span>
alias bowl&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bower list&amp;#39;&lt;/span>
alias bows&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bower search&amp;#39;&lt;/span>
alias bowsw&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bower info&amp;#39;&lt;/span>
alias bowup&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bower update&amp;#39;&lt;/span>
alias bowun&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bower uninstall --save&amp;#39;&lt;/span>
compdef _bower_installed_packages bowun
alias nw&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;~/sites/desktop/node-webkit/nw&amp;#39;&lt;/span>
&lt;span style="color:#75715e"># Environmental Establishment&lt;/span>
alias cli&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cd ~/Insync/caseykuhlman@watershedlegal.com/A.Clients&amp;#34;&lt;/span>
alias clear!&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cd ~/ &amp;amp;&amp;amp; source .zshrc &amp;amp;&amp;amp; clear&amp;#34;&lt;/span>
alias reload!&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;source ~/.zshrc &amp;amp;&amp;amp; cd .. &amp;amp;&amp;amp; cd -&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Command Line Tools&lt;/span>
alias decrypter&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ghostscript -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=unencrypted.pdf -c .setpdfwrite -f&amp;#34;&lt;/span>
alias subl&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/home/coda/.bin/sublime&amp;#34;&lt;/span>
alias lt&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/opt/LightTable/LightTable&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>One thing which should be mentioned is the difference between functions and aliases. There is a subtle difference between the two. Basically an alias is like a contraction. It is just a shorthand thing for a specific other command. So there is not much you can do with it AFTER the alias. If you need to pass the function a variable (like a file or a folder or a switch) then you should use a function. If you do not need to pass a variable of any time then you can use aliases if you are not trying to do something terribly complex. If there are a lot of steps to what you are trying to accomplish then a function is usually the better way to go even if it does not require any variables. Those are my two cents, am sure others may feel differently.&lt;/p>
&lt;p>And that is it. Type a few commands, copy and paste some files and you'll be good to go with a dynamic, fast, and totally beautiful and useable shell at the push of a button.&lt;/p>
&lt;p>Happy Hacking!&lt;/p>
&lt;p>~ # ~&lt;/p></description></item><item><title>Using Dropbox as a Settings Repository</title><link>https://caseykuhlman.com/muniments/2014/2014-01-29-dropbox-as-a-settings-repository/</link><pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2014/2014-01-29-dropbox-as-a-settings-repository/</guid><description>&lt;p>As I said in my previous post, the main way in which I used Dropbox is as a repository for all my settings. Almost the entirety of this will also work with OSX for the record, save for program settings locations in OSX are different than in Linux &amp;ndash; they are usually in ~/Library/Application\ Settings.&lt;/p>
&lt;h2 id="how-linux-usually-stores-settings">How Linux (Usually) Stores Settings&lt;/h2>
&lt;p>One of the most brilliant things about Linux systems is how Linux desktops (for the most part) store your application settings. On Windows, these are usually stored in databases which makes them difficult to sync and store. But on POSIX systems generally, and Linux in particular, settings for applications are largely stored in files. Indeed, usually files are simple text files rather than anything which is truly difficult to handle.&lt;/p>
&lt;p>There are two main implications for the operating system utilizing files rather than databases for application settings. The first is that you can move the files around to where &lt;strong>you&lt;/strong> want them to be rather than where the &lt;em>developers&lt;/em> think they should be and then you can fake the computer into thinking the files are really where the program is looking for them at. The second implication is that it is terribly easy to set your settings up to be cloud synced which means that you can always pull them in when you have a new machine or setup.&lt;/p>
&lt;h2 id="the-importance-of-installation-scripts">The Importance of Installation Scripts&lt;/h2>
&lt;p>One of the major things which Linux has showed me is how to create a fungible system. I use Ubuntu which is on a six month release cycle. This means that every six months or so I will completely format my hard drive and start from scratch.&lt;/p>
&lt;p>In the 90's I had a friend in college who used to format his hard drive all the time. He would take like one weekend every quarter and do this. It was ridiculous. At that time he was running Windows I'm pretty sure so I had no idea why he would do it so often. Perhaps he was not on Windows and had figured out back then what I know now which is that if you set things up correctly, formatting your hard drive and reinstalling everything can happen smoothly, resiliently and easily.&lt;/p>
&lt;p>At this point when I update my Ubuntu release and format my hard drive the first thing I do after logging in is download and run one script. That script is a master script which runs all sorts of smaller scripts. It takes about an hour or maybe three to download and install everything depending on the bandwidth of my connection &amp;ndash; but even in Hargeisa where the bandwidth is awful it runs in about three hours. When it is finished, I have only a few things to do (like turn on a few extensions for Ubuntu-GNOME and maybe change my wallpaper) and my system will look and act &lt;strong>exactly&lt;/strong> as it did before the new installation. I will write more about this process later. Suffice it to say for this post that my Dropbox bootstrap script is a huge part of that.&lt;/p>
&lt;h2 id="setting-up-a-dropbox-bootstrap-script">Setting up a Dropbox Bootstrap Script&lt;/h2>
&lt;p>Given all the above, about two years ago I realized that what I needed to do was to put all of my non-data non-music non-document non-video files that I would need to make my system look and feel the same across installations in my Dropbox. Dropbox works exceedingly well for this. In Linux most programs look for their configuration file in one of a few places.&lt;/p>
&lt;ul>
&lt;li>Some programs look for a file in the home folder which is usually the name of the program + rc. So for example, the program htop which is a great program for seeing the processes that are currently running and a whole lot more stores its settings in ~/.htoprc.&lt;/li>
&lt;li>Some programs look for a set of files within ~/.config/PROGRAM_NAME/FILES.&lt;/li>
&lt;li>Some programs, particularly desktop (as in GNOME, Unity, Elementary, etc.) files and menus, in a various directories under ~/.local/share/STUFF.&lt;/li>
&lt;li>Some programs make a folder in your home directory and put files under there. Usually these are in a folder called something like ~/.PROGRAM_NAME. For example, filezilla a popular FTP program puts its configuration files under ~/.filezilla&lt;/li>
&lt;/ul>
&lt;p>If you do not know in Linux terms, the &lt;code>~&lt;/code> in the above is a &amp;lsquo;contraction&amp;rsquo; for &lt;code>/home/USER&lt;/code>. This is standard across POSIX systems and is a highly utilized shorthand.&lt;/p>
&lt;p>Since programs have different methods of placing their configuration files, setting up your own cloud sync for program settings will require that you look around in your home folder. If you are doing this, it is important to understand that when a file has a &lt;code>.&lt;/code> in the beginning of it on Linux that is a hidden file and it will not show up in Nautilus unless you press &lt;code>ctrl+h&lt;/code> (for Hidden). If you are in terminal &amp;ndash; which I highly recommend everyone to learn at least the basics of &amp;ndash; then you will not see hidden files when you type &lt;code>ls&lt;/code> (LiSt files) unless you add the &lt;code>-a&lt;/code> (for All) switch to make the command &lt;code>ls -a&lt;/code>.&lt;/p>
&lt;p>The key to the whole system is creating &lt;code>symlinks&lt;/code> (symbolic link) within your user folder. Symbolic links are what makes the programs &lt;em>think&lt;/em> they are looking at a file in one place when they are &lt;em>really&lt;/em> looking at a file in another location. Files which are really symlinks look, act, and feel almost exactly as if they were actually in the place where the symlink resides rather than in the place where they actually are.&lt;/p>
&lt;p>Once you have found the files that you want to have synced to the cloud it is a rudimentary process to set them up. The basic flow is as follows:&lt;/p>
&lt;ol>
&lt;li>Copy the files into your cloud sync folder.&lt;/li>
&lt;li>Create a &lt;em>from&lt;/em> the new location in the cloud sync folder &lt;em>to&lt;/em> the previous location where the program will really look for it.&lt;/li>
&lt;/ol>
&lt;p>It is truly just that simple. If you want to symlink directories there is the added step of checking to see if a directory is made within the cloud sync folder and making the directory within the cloud sync folder if it is not. But that is the only added step. If you create a symlink directory, it operates &amp;ndash; for all intents and purposes &amp;ndash; just as a normal directory does. It has files inside of it and programs can look inside of the directory at the files just as they normally would.&lt;/p>
&lt;h2 id="wrapping-it-all-up-in-an-executable-script">Wrapping it All up in an Executable Script&lt;/h2>
&lt;p>To automate this process is very straight forward. You simply want to create an executable script and put it in your cloud sync folder. Then you simply call that script whenever you like. Here is what I did.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ touch ~/Dropbox/bootstrap
$ chmod +x ~/Dropbox/bootstrap
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first line creates a bootstrap file within my Dropbox folder; the second line makes it executable. At this point the file is simply blank. So then one needs to put something into the script to make it work. Here's excerpts from my bootstrap file.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#!/usr/bin/env zsh
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#^jist /home/coda/Dropbox/bootstrap -u 4950102&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> ! -d ~/Dropbox/Dot-Files &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
mkdir Dropbox/Dot-Files/
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> file_boot &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -f $1 &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#f92672">[&lt;/span> ! -L $1 &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ! -e $2 &lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
cp $1 $2
&lt;span style="color:#66d9ef">fi&lt;/span>
rm $1
ln -s $2 $1
&lt;span style="color:#66d9ef">elif&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -e $2 &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
ln -s $2 $1
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> dir_boot &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -d $1 &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#f92672">[&lt;/span> ! -L $1 &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ! -e $2 &lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
cp $1 $2 -R
&lt;span style="color:#66d9ef">fi&lt;/span>
rm -rf $1
ln -s $2 $1
&lt;span style="color:#66d9ef">elif&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -e $2 &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
ln -s $2 $1
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;First the dot files.&amp;#34;&lt;/span>
file_boot ~/.face ~/Dropbox/Camera&lt;span style="color:#ae81ff">\ &lt;/span>Uploads/0000.gravatar.jpeg
file_boot ~/.gitconfig ~/Dropbox/Dot-Files/gitconfig
file_boot ~/.gitattributes ~/Dropbox/Dot-Files/gitattributes
file_boot ~/.config/gtk-3.0/bookmarks ~/Dropbox/Dot-Files/gtk-bookmarks
file_boot ~/.installd ~/Dropbox/Dot-Files/installd-workers
file_boot ~/.rvmrc ~/Dropbox/Dot-Files/rvmrc-workers
file_boot ~/.vimrc ~/Dropbox/Dot-Files/vimrc-workers
file_boot ~/.npmrc ~/Dropbox/Dot-Files/npmrc-workers
file_boot ~/.zshrc ~/Dropbox/Dot-Files/zshrc-workers
echo &lt;span style="color:#e6db74">&amp;#34;Then come the config directories.&amp;#34;&lt;/span>
dir_boot ~/.ssh ~/Dropbox/Ssh
dir_boot ~/.bin ~/Dropbox/Binary&lt;span style="color:#ae81ff">\ &lt;/span>Files
echo &lt;span style="color:#e6db74">&amp;#34;Thereafter we take care of the menus and desktop.&amp;#34;&lt;/span>
dir_boot ~/.config/autostart ~/Dropbox/Autostart&lt;span style="color:#ae81ff">\ &lt;/span>-&lt;span style="color:#ae81ff">\ &lt;/span>.config/
dir_boot ~/.config/menus ~/Dropbox/Menus&lt;span style="color:#ae81ff">\ &lt;/span>-&lt;span style="color:#ae81ff">\ &lt;/span>.config
dir_boot ~/.local/share/gnome-shell/extensions ~/Dropbox/Gnome-shell&lt;span style="color:#ae81ff">\ &lt;/span>-&lt;span style="color:#ae81ff">\ &lt;/span>.local-share/
dir_boot ~/.local/share/applications ~/Dropbox/Menus&lt;span style="color:#ae81ff">\ &lt;/span>-&lt;span style="color:#ae81ff">\ &lt;/span>.local-share-applications
dir_boot ~/.local/share/desktop-directories ~/Dropbox/Menus&lt;span style="color:#ae81ff">\ &lt;/span>-&lt;span style="color:#ae81ff">\ &lt;/span>.local-share-directories
dir_boot ~/.config/elegance-colors ~/Dropbox/Elegance&lt;span style="color:#ae81ff">\ &lt;/span>-&lt;span style="color:#ae81ff">\ &lt;/span>.config
dir_boot ~/.icons ~/Dropbox/Icons
echo &lt;span style="color:#e6db74">&amp;#34;Finally come the \&amp;#34;other\&amp;#34; working directories.&amp;#34;&lt;/span>
dir_boot ~/.cheat ~/Dropbox/Cheat-Sheats
dir_boot ~/.config/libreoffice ~/Dropbox/Libreoffice&lt;span style="color:#ae81ff">\ &lt;/span>-&lt;span style="color:#ae81ff">\ &lt;/span>.config
dir_boot ~/.conky ~/Dropbox/Conky
dir_boot ~/.filezilla ~/Dropbox/Filezilla
dir_boot ~/.fonts ~/Dropbox/Fonts
dir_boot ~/.gconf/apps/guake ~/Dropbox/Guake&lt;span style="color:#ae81ff">\ &lt;/span>-&lt;span style="color:#ae81ff">\ &lt;/span>.gconf&lt;span style="color:#ae81ff">\ &lt;/span>-&lt;span style="color:#ae81ff">\ &lt;/span>apps
echo &lt;span style="color:#e6db74">&amp;#34;All done! Dotfiles built!&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let's walk through the script. The first line is called a shebang. It tells the computer in what scripting language the script should be run in. I chose to run this in zsh as that is my normal shell. The other major shell language, bash, could be used but there are some minor differences in the functions that would need to be worked out.&lt;/p>
&lt;p>For most of my executable scripts, I make sure they are on Github's Gist system so that I can easily remember and retrieve them. &lt;code>jist&lt;/code> is a command line gem written in ruby that makes it easy to post, retrieve and update your Gists. I usually make a caseybang(tm) reminding myself what the code for the gist is by putting the second line as a jist line. Then I simply can copy and execute this from the command line. Largely it can be ignored.&lt;/p>
&lt;p>The next section looks in the Dropbox folder to see if there is a Dot-Files directory. If it is not there then the script will make one. I have one there, but this is just for resiliency in the off chance that something weird happens during an upgrade. After that there are two functions which are built, file_boot and dir_boot. They do more or less what they sound like. One bootstraps individual files and one bootstraps directories.&lt;/p>
&lt;p>[Note, in the following paragraphs the &lt;strong>first&lt;/strong> ($1 in the script) means the local or normal place on the hard drive &amp;ndash; where the program will look for the file or directory; the &lt;strong>second&lt;/strong> ($2 in the script) means the cloud sync location.]&lt;/p>
&lt;p>What the function does is asks some questions. First it asks whether the first ($1) exists as a file (-f) or directory (-d) depending on whether the file_boot or dir_boot function is being called.&lt;/p>
&lt;p>If it exists then the function will then ask if the first ($1) is a symlink AND whether the second ($2) exists. This usually means that I have added a file or directory to the script and it needs to bring it into my Dropbox. If this test is satisfied then the function will copy the first to the second. But if the first exists and is not a link AND the second exists then we are in a different world. This usually means that I'm reinstalling a system so we do not want to copy in the file (or directory) to the cloud sync folder as it will then overwrite my existing settings with the default settings (which is usually when this test is satisfied). After either copying over or not, depending on the test, the function will then remove the first ($1) and create a symlink from the second to the first.&lt;/p>
&lt;p>If the first ($1) does not exist (in other words the initial test was not satisfied), but the second ($2) exists then the function will create a symlink from the second to the first.&lt;/p>
&lt;p>That is it. It is very straight-forward. It took some massaging to get the functions correct, but once I realized the flow then it was straight-forward to create the tests and actions.&lt;/p>
&lt;p>After the script establishes the function then it simply lists the files and directories to symlink. I've put a redacted version of my complete list above to show the different locations and how I organize it. Some highlights include, autostarting settings. I keep my autostart settings in Dropbox so when I install a new system the same programs autostart. Try that in windows. Also my menus are the same across systems &amp;ndash; even for programs which I have manually placed into the desktop. Try that in windows. My desktop themes, icons, and extensions are also there so that my desktop will look and feel almost the same even when Gnome-Shell upgrades. Try that in windows.&lt;/p>
&lt;p>As I go along and add or remove programs which I want to add their settings to the dropbox folder then I simply add a new line into the appropriate section of the script by adding &lt;code>file_boot LOCAL_LOCATION SYNC_LOCATION&lt;/code> or dir_boot depending on whether it is a file or directory I'm bootstrapping. After adding the line, I save the file and then execute the script. Voila, the file is copied into my Dropbox and symlinked to.&lt;/p>
&lt;p>When I'm installing my next update and format my harddrive, one of the first things I do in my install script is to begin downloading my dropbox. Then later in the script when it is all downloaded, I simply execute this script from the main install script which symlinks everything in and deletes the defaults which Ubuntu install wizard sets up. Voila, everything as it was before.&lt;/p>
&lt;h2 id="improvements">Improvements&lt;/h2>
&lt;p>This script could be improved by pulling out the ~/Dropbox portion into a variable and putting that variable at the top of the script for those who may use the script in a different system or have their dropbox folder in a different location. Other than that if you have improvements definitely let me know, but all in all it is quite straightforward.&lt;/p>
&lt;p>At any rate, hope this is somewhat useful.&lt;/p>
&lt;p>Happy Hacking&lt;/p>
&lt;p>~ # ~&lt;/p></description></item><item><title>Cloud Sync and Backup Options -- Overview</title><link>https://caseykuhlman.com/muniments/2014/2014-01-28-cloud-sync-and-backup/</link><pubDate>Tue, 28 Jan 2014 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2014/2014-01-28-cloud-sync-and-backup/</guid><description>&lt;p>Backup your files. Everyone knows it. Even those who know very, very little about computers understand that you should back things up. But no one does. Let's talk quickly about the options which Linux has for backing up your files.&lt;/p>
&lt;p>Cloud sync is not terribly new, but it has definitely been mainstreamed within the past year or two. Increasingly, bar associations have been distributing ethics opinions on how lawyers should keep their client's data safe. So far, no bar association that I know of has said outright that lawyers within their jurisdiction cannot keep their client files backed up to the cloud. I certainly know many lawyers who are skeptical about cloud backup and as a result do not do it.&lt;/p>
&lt;p>Yet not using the cloud comes with a limitation, because cloud syncing is damn powerful. You have the ability to access your files from anywhere. You have the ability to very simply and quickly reconstitute your data after getting a new computer, formating an existing system, or when you are on a system which is not your main system.&lt;/p>
&lt;p>I use three cloud syncing systems (two commercial providers and one that I have built for Watershed) and a physical external hard drive to back up my data. Everything that is important to me &amp;ndash; literally everything &amp;ndash; is put onto at least one of the proprietary cloud syncing services as well as my own, secure cloud server which I completely control, as well as my external hard drive. I have my data in different data centers, on different continents, and on different types of drives. It would take nuclear annihilation of the human species for me to lose anything more than a few file updates.&lt;/p>
&lt;p>Having your data in more than one place requires that you understand the security structure of that data. For this reason my external hard drive does not travel with me &amp;ndash; because despite my previous advice it is not encrypted. For this reason I have a highly secure server hosted within Watershed's cloud that serves to only accept our git repositories and our partner's backups. I'll get to how we structure that process in a later post.&lt;/p>
&lt;h2 id="how-i-structure-my-cloud-syncing-system">How I Structure My Cloud Syncing System&lt;/h2>
&lt;p>I use two commercial cloud sync providers, but I do not use them for the same thing. That would be a waste of the free space cloud providers offer. Personally, I use Dropbox and Google Drive. I use Dropbox as, well, a dropbox but the main way I use Dropbox is as a repository for all my configuration files. In an upcoming post, I'll walk through my Dropbox bootstrapping system, but it is very similar in nature to the system by &lt;a href="https://github.com/lra/mackup">Mackup&lt;/a>. The basic idea is that I copy folders and files into specific spots on my Dropbox and then symlink to those. I use Google Drive for all my client and internal Watershed documents. Both of my Dropbox and Google Drive are then backed up on a daily basis to Watershed's server and to my external hard drive in the office.&lt;/p>
&lt;p>There is no reason to backup one cloud provider into another either by putting one inside the other or by symlinking between them. Not only would it be a waste of valuable space, but also it &lt;em>could&lt;/em> create an infinite loop where one or both systems were constantly updating. Since both of these services at least count versions of files against your data caps, if you tried to back up one system to another you would likely have so many versions of some files that you could creep up on your data cap quickly.&lt;/p>
&lt;p>I find Dropbox to be faster for smaller files and Google Drive to be faster for larger files. I have no benchmarks for this, it is simply how it feels. Which makes this distribution of effort important.&lt;/p>
&lt;h2 id="rsync----still-crazy-after-all-these-years">Rsync &amp;ndash; Still Crazy After All These Years&lt;/h2>
&lt;p>Where cloud sync providers are amazing is in how fast they can update your cloud with your files. It is grand. But you don't actually always want things to be instant. Sometimes you want to go slow. When I'm in Somaliland for instance where bandwidth can be limited I do not want to necessarily take valuable bandwidth that I may need to do research or check facebook by allowing cloud sync services to update too frequently.&lt;/p>
&lt;p>This is why my backups to Watershed's servers and my on-site external drive are performed on a daily basis. I set my backups to run via rsync on a cron job so I never need to worry about them. What I love about posix systems is how simple they make it to build a small script and what I love about linux is how easy it is to set up a cron job to run the small scripts on whatever basis you want the script to run. These two concepts in combination with rsync makes for a completely hassle free system. If you do not have rysnc on your system then simply &lt;code>sudo apt-get install rysnc&lt;/code> or install it from your app store.&lt;/p>
&lt;p>First, I built a backupjobs script in my &lt;code>~/.bin&lt;/code> folder:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
USER&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>who am i | awk &lt;span style="color:#e6db74">&amp;#39;{print $1}&amp;#39;&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
BASIS&lt;span style="color:#f92672">=&lt;/span>/home/$USER
EXTERNAL_HD&lt;span style="color:#f92672">=&lt;/span>/media/$USER/MediaHD
GANDI_DRIVE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#75715e">#REDACTED -- THIS IS THE CLOUD DRIVE&lt;/span>
IS_GANDI_THERE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>nmap $REDACTED -PN -p ssh | awk &lt;span style="color:#e6db74">&amp;#39;{print $2}&amp;#39;&lt;/span>|grep open&lt;span style="color:#e6db74">`&lt;/span>
IS_EXTERNAL_HD_MOUNTED&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>mount 2&amp;gt; /dev/null | grep &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$EXTERNAL_HD&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | cut -d&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> -f3&lt;span style="color:#e6db74">`&lt;/span>
&lt;span style="color:#75715e"># STEP 1 - BACKUP to GANDI IF GANDI&amp;#39;S THERE&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$IS_GANDI_THERE&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#f92672">]&lt;/span> ;&lt;span style="color:#66d9ef">then&lt;/span>
rsync -rtpovclHzs --progress --delete --ignore-existing $BASIS/Dropbox $GANDI_DRIVE
rsync -rtpovclHzs --progress --delete --ignore-existing $BASIS/Insync/caseykuhlman@gmail.com $GANDI_DRIVE/GDocs
rsync -rtpovclHzs --progress --delete --ignore-existing $BASIS/Insync/caseykuhlman@watershedlegal.com $GANDI_DRIVE/GDocs
rsync -rtpovclHzs --progress --delete --ignore-existing $BASIS/sites/ $GANDI_DRIVE/Coding
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#75715e"># STEP 2 - BACKUP to EXTERNAL HD IF IT&amp;#39;S THERE&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$IS_EXTERNAL_HD_MOUNTED&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#f92672">]&lt;/span> ;&lt;span style="color:#66d9ef">then&lt;/span>
&lt;span style="color:#75715e">#rsync -rtpovclHzs --progress --delete --ignore-existing $BASIS/Dropbox $EXTERNAL_HD&lt;/span>
rsync -rtpovclHzs --progress --delete --ignore-existing $BASIS/Insync/caseykuhlman@gmail.com $EXTERNAL_HD/GDocs
rsync -rtpovclHzs --progress --delete --ignore-existing $BASIS/Insync/caseykuhlman@watershedlegal.com $EXTERNAL_HD/GDocs
rsync -rtpovclHzs --progress --delete --ignore-existing $BASIS/sites/ $EXTERNAL_HD/Coding
rsync -rtpovclHzs --progress --delete --ignore-existing $EXTERNAL_HD/Photos $GANDI_DRIVE
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#75715e"># STEP 3 - NOTIFICATIONS&lt;/span>
&lt;span style="color:#75715e">## REDACTED&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The script is fairly straight forward. The first section of the script simply sets up defaults which I can use throughout the rest of the script. The second section then checks if Watershed's cloud server is available and if so, it rsync's the designated folders into the server. rsync has an absolute ton of options which allow it to do a great variety of things. If you want to understand what each of the switches I have set up do (switches mean the &lt;code>-rtpovclHzs --progress --delete --ignore-existing&lt;/code> portion of the script) then simply go to your terminal and type &lt;code>man rsync&lt;/code>. If you are too lazy to read all of the man page &amp;ndash; and I don't blame you because it is long and I've been working through this for a while now, then you can simply copy the switches and know that they will make a mirror online of the current state of your data. This is not a backup setup, it is a mirroring setup. The major difference between the two being if you delete something locally it will be deleted on the remote server. If that is not what you want then you would simply delete the &lt;code>--delete&lt;/code> switch.&lt;/p>
&lt;p>There is one minor gotcha with rsync. If you look at the difference between the last two rsync calls within the &lt;code>Step 2&lt;/code> section you should see a very small difference. What is different is that in the final call there is a slash at the end of the reference which does not exist in the previous one, in other words the difference is &lt;code>$BASIS/sites/&lt;/code> and &lt;code>$BASIS/Insync/caseykuhlman@watershedlegal.com&lt;/code>. To rysnc the latter means to copy the directory (and anything inside of it based on the &lt;code>-r&lt;/code> switch earlier in the command) so that there will be a &lt;code>caseykuhlman@watershedlegal.com&lt;/code> directory within the destination. To rsync the former means to copy everything inside of the directory so that there will not be a &lt;code>sites&lt;/code> folder inside the destination.&lt;/p>
&lt;p>The last major thing that I have on the script is a notification system which sends me a &lt;a href="https://pushover.net">Pushover&lt;/a> alert whenever the script has run. Since I run the script each night, if I do not wake up to a notification then I know that it has not run. I have yet to not have that happen except for when my computer is off or I'm in transit but usually it is fine as everything will get backed up the next day. The notifications tell me whether it has backed up to the onsite external and/or the server so I quickly can tell what has happened.&lt;/p>
&lt;h2 id="automating-rsync-with-cron">Automating rsync with cron&lt;/h2>
&lt;p>Cron jobs are amazing. This will be quite quick as it is very very straight forward. The script I showed above is saved as ~/.bin/backupjobs. (Note after you save a script do not forget to make it executable by running &lt;code>chmod +x&lt;/code> on your system.) Then all I have to do is add the following line to my crontab by running &lt;code>crontab -e&lt;/code> (for edit) from my terminal&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#ae81ff">42&lt;/span> &lt;span style="color:#ae81ff">03&lt;/span> * * * /home/coda/.bin/backupjobs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cron is a bit confusing at first, but here is what is happening. The first field is the minutes, so this job is to run at 42 minutes. The second field is the hours, so this job is to run at 03 hours, or 0342. The third field is the day of the month (in other words if you wanted to run monthly jobs you would set this to run on a particular day of the month &amp;ndash; maybe the 1st or the 15th or whatever), the * in the field means every day of the month. The next field is the month of the year, so this job is to run every month of the year and every day of the month. The final field is the day of the week. So the last three fields having a * means that the script should run at 0342 every day. The final portion is simply the script that the cronjob is supposed to run.&lt;/p>
&lt;p>That's it. Now everything is automated. I save files in my Dropbox or Google Drive or other folders during the day and at night my rsync and cron jobs back those up automatically to my onsite external and Watershed's servers. Voila. Completely automated, nuclear attack (but not nuclear annihilation) proof system.&lt;/p>
&lt;p>Happy Hacking!&lt;/p>
&lt;p>~ # ~&lt;/p></description></item><item><title>Linux 4 Lawyers -- Encrypting your hard drives</title><link>https://caseykuhlman.com/muniments/2014/2014-01-23-encrypting-your-hard-drives/</link><pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2014/2014-01-23-encrypting-your-hard-drives/</guid><description>&lt;p>I encrypt my hard drives because it is the right thing to do. I don't need an ethics opinion from my bar association to understand that it is a bad thing to have a bunch of client stuff on an unencrypted drive that is constantly moving around.&lt;/p>
&lt;p>[WAIT, what're you talking about?]&lt;/p>
&lt;p>OK. So let us take a step back. There are a bunch of ways in which you can secure data. There are physical security measures like having a guard at your office, keeping computers in safes, chaining computers to desks and other such physical security measures. I'm not going to talk about those as they do not apply to anyone I know. I hope the data center which hosts my servers have some of them, but for most normal lawyers these are overkill.&lt;/p>
&lt;p>There are also non-physical security measures like putting a password on a file, on a directory, or on your operating system. All of these are well and good, but here is the dirty little secret that most people don't really know &amp;ndash; if someone gets access to your hard drive they can still get at a lot of that data. If someone has physical access to your hard drive then they can simply mount it onto their computer. Once your hard drive is mounted onto their system then the password from your OS and most of your other non-physical security measures are mooted by the fact that they will have root access to your hard drive.&lt;/p>
&lt;p>The easiest way to solve this problem is to encrypt your entire drive (or a partition). In Ubuntu, this is super simple. All you have to do is to tell Ubuntu to encrypt the entire drive when you are running the install script for Ubuntu. Voila. Totally encrypted drive.&lt;/p>
&lt;p>Personally I use one password for the encryption unlock which is &lt;em>only&lt;/em> used for this purpose. I use a separate password for my OS login; I use neither of these passwords anywhere else on the internet. Indeed, these are the only two passwords which I really need to remember. The remainder of my passwords live in a KeePass database which in turn resides in my Dropbox account. They are all very long and very arbitrary which keeps them as secure as possible. I change them frequently and use two-step authentication everywhere I can. Yet none of that would matter if I did not have my hard drive encrypted and someone gained possession of my hard drive. Then all of my client data would be completely compromised and there is nothing I could do about it.&lt;/p>
&lt;p>I am sure that Windows and OSX have solutions for this as well. I'm also sure that neither is nearly as easy as it is on Ubuntu. Linux guys get security in a way that others don't. So whatever OS you are on, encrypt your hard drives and make sure that you can remote wipe any phones or tablets (which Android makes very easy and I'm sure iOS does as well).&lt;/p>
&lt;p>Happy Hacking.&lt;/p>
&lt;p>~ # ~&lt;/p></description></item><item><title>Autostarting Different Programs in Different Desktops</title><link>https://caseykuhlman.com/muniments/2013/2013-04-12-autostarting-for-different-linux-desktops/</link><pubDate>Fri, 12 Apr 2013 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2013/2013-04-12-autostarting-for-different-linux-desktops/</guid><description>&lt;p>One of the most obvious appeals of Linux to me is the insane levels of customization you can achieve. I mainly use Gnome Shell as my desktop environment, but since I use Ubuntu I keep Unity on my machine. I'm not a hater of Unity or Gnome as many Linux users (who can be quite vitriolic in their statements as to desktop environments). I &lt;em>mostly&lt;/em> use Gnome, but since Ubuntu has some interesting things going on with Unity sometimes I like to drop into Unity to see what I'm missing.&lt;/p>
&lt;p>There is a problem at least in Ubuntu 12.10 running both desktops. To use Gnome Shell one &lt;em>should&lt;/em> install the &lt;code>gdm&lt;/code> package in order to get the full Gnome desktop experience - including the Gnome lock screen which is beautiful. GDM stands for Gnome Desktop Manager. It is an alternative to &lt;code>lightdm&lt;/code> which Ubuntu installs by default and which Unity uses. When you switch to gdm I found out that just after installing it you should logout of Unity before restarting your machine. But I didn't do that.&lt;/p>
&lt;p>The result of installing gdm and then restarting your machine is that the X server (which runs most of the linux desktops and lies in the stack underneath both gdm and lightdm) doesn't start correctly for &amp;ldquo;both&amp;rdquo; Unity and Shell. It is something to do with the way that dm loads the XSessions and it is beyond my understanding. In any event the problem for me was that while gdm made Shell work as it should out of the box, Unity would not load when I logged into Unity desktop.&lt;/p>
&lt;p>So I built a small autostart script that for Unity that will load Unity after logging into the Ubuntu desktop. This was straight-forward. But the problem I had is that I didn't want the script to try to load Unity when I logged into Gnome. But, as usual with linux, with a bit of Googling I came across the key. In X session desktop scripts (which are the main way to start/run programs) you can define which desktop environment they should show up in. This means that when you put the script into the autostart folder (~/.config/autostart) you can mark the script to &amp;hellip; &lt;code>OnlyShowIn=GNOME;&lt;/code> or &lt;code>OnlyShowIn=UNITY;&lt;/code> or &lt;code>NotShowIn=GNOME;&lt;/code> or &lt;code>NotShowIn=UNITY;&lt;/code>. You can add multiple environments for the desktop script to be shown or hidden in after the semicolons.&lt;/p>
&lt;p>This is helpful for showing or hiding certain programs/scripts in your menus in different desktop environments but also when you put it in the scripts in your autostart folder you can tell linux to only load the programs when you log into certain desktop environments. I tested the script and it didn't work at first. The problem was because gdm wasn't loading Unity, the autoload scripts I marked to only load in Unity weren't triggering. Even though gdm sent me to Unity, the desktop environment wasn't loading correctly. So I had to change the script from &lt;code>OnlyShowIn=UNITY;&lt;/code> to &lt;code>NotShowIn=GNOME;&lt;/code>. This meant that when the desktop environment saw that it was not in Shell it triggered the script for Unity. It isn't ideal as the autoload scripts that are linked to Unity don't run &lt;em>after&lt;/em> the Unity reload script runs, but it is a decent enough work around for the amount that I use Unity (minimal).&lt;/p>
&lt;p>This is very powerful as you usually want Gnome Shell and Unity to load the different sugar packages such as applets, indicators, etc., that help you define the environment you are working in. This is reason 7 million why Linux is awesome. In any event, here's the script I use to reload the Unity desktop after I log into Unity.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#f92672">[&lt;/span>Desktop Entry&lt;span style="color:#f92672">]&lt;/span>
Type&lt;span style="color:#f92672">=&lt;/span>Application
Exec&lt;span style="color:#f92672">=&lt;/span>unity
Hidden&lt;span style="color:#f92672">=&lt;/span>false
NoDisplay&lt;span style="color:#f92672">=&lt;/span>false
X-GNOME-Autostart-enabled&lt;span style="color:#f92672">=&lt;/span>true
Name&lt;span style="color:#f92672">=&lt;/span>Unity-Reset
NotShowIn&lt;span style="color:#f92672">=&lt;/span>GNOME;&lt;/code>&lt;/pre>&lt;/div>
&lt;p>I saved that in ~/.config/autostart and voila all (mostly) working as it should.&lt;/p>
&lt;p>Happy Hacking!&lt;/p>
&lt;p>~ # ~&lt;/p></description></item></channel></rss>