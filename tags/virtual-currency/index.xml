<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>underWater desert Blogging</title><link>https://caseykuhlman.com/</link><description>A Site About Resilience and Authoritarianism</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>casey@caseykuhlman.com (Casey Kuhlman)</managingEditor><webMaster>casey@caseykuhlman.com (Casey Kuhlman)</webMaster><copyright>All Content Licensed CC BY-NC-SA 4.0</copyright><lastBuildDate>Wed, 16 Apr 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://caseykuhlman.com/tags/virtual-currency/index.xml" rel="self" type="application/rss+xml"/><item><title>What the Esteemed (and Very Smart) Law Professors Missed at the HLS Ethereum Talk</title><link>https://caseykuhlman.com/muniments/2014/2014-04-16-etherum-visits-harvard/</link><pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2014/2014-04-16-etherum-visits-harvard/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Yesterday a &lt;a href="http://cyber.law.harvard.edu/events/luncheon/2014/04/difilippi">very interesting event&lt;/a> happened. And I had the pleasure to listen in. &lt;a href="https://cyber.law.harvard.edu/people/pdefilippi">Primavera De Filippi&lt;/a> talked &lt;a href="https://ethereum.org">Ethereum&lt;/a> at a Berkman luncheon.&lt;/p>
&lt;p>For those who do not know Berkman is a center at Harvard University. For those who do not know Harvard, welcome to earth. Berkman is officially the Berkman Center for Internet and Society. It is a joint research center housed in Harvard's Law School with the following mission:&lt;/p>
&lt;blockquote>
&lt;p>The Berkman Center's mission is to explore and understand cyberspace; to study its development, dynamics, norms, and standards; and to assess the need or lack thereof for laws and sanctions. We are a research center, premised on the observation that what we seek to learn is not already recorded. Our method is to build out into cyberspace, record data as we go, self-study, and share. Our mode is entrepreneurial nonprofit.&lt;/p>
&lt;/blockquote>
&lt;p>For more, see &lt;a href="https://cyber.law.harvard.edu/about">here&lt;/a>.&lt;/p>
&lt;p>Primavera's talk had a lovely title, &lt;code>Ethereum: Freenet or Skynet?&lt;/code> and it really was a bit of an exploration of the ideas underlying this topic. Primavera first popped up on my radar on the Ethereum Skype group a couple of weeks ago, and I have read &lt;a href="http://www.wired.com/2014/03/decentralized-applications-built-bitcoin-great-except-whos-responsible-outcomes/">some&lt;/a> of &lt;a href="http://www.wired.com/2014/01/its-time-to-take-mesh-networks-seriously-and-not-just-for-the-reasons-you-think/">her work&lt;/a> on Wired, which I would highly recommend.&lt;/p>
&lt;p>Her talk involved a quite fair introduction to Ethereum and what the community is trying to build. What was most interesting about listening to the live audio stream of the event was the questions which were asked by the Professors, researchers, and whomever else was in the room. The video of the talk is online and I would definitely encourage anyone within the Ethereum community to take a listen.&lt;/p>
&lt;p>For those who are not familiar with it, Ethereum is a decentralized blockchain network (similar in nature, but distinct from, Bitcoin). Ethereum is touted as a mechanism which allows developers|lawyers to develop and deploy smart contracts which operate autonomously. Officially, there is the Ethereum boilerplate:&lt;/p>
&lt;blockquote>
&lt;p>Ethereum is a platform and a programming language that makes it possible for any developer to build and publish next-generation distributed applications. Ether, Ethereum's internal currency, powers its applications and acts as a &amp;lsquo;token of exchange&amp;rsquo; on the decentralized network. Ethereum can be used to codify, decentralize, secure and trade just about anything: voting, domain names, financial exchanges, crowdfunding, company governance, contracts and agreements of most kind, intellectual property, and even smart property thanks to hardware integration.&lt;/p>
&lt;/blockquote>
&lt;p>I had specific reactions to three of the veins of questioning which were raised during the question section of the discussion.&lt;/p>
&lt;h2 id="enforcement-or-administration">Enforcement or Administration?&lt;/h2>
&lt;p>A great proportion of the questions had to due with enforcement. And most of these questions sort of miss the point. This is exactly why I recommended at my previous talk that the Ethereum community does a slight pivot from the self-enforcing contracts verbiage to self-administering contracts. Enforcement is a term which gets lawyers all aflutter &amp;ndash; and rightly so.&lt;/p>
&lt;p>Ethereum could never really be self-enforcing until its blockchain becomes ubiquitous. Perhaps then it could be actually self-enforcing, but until such a time the limitations of the Ethereum blockchain mean that there is not actually much that Ethereum could do outside the context of the blockchain. Indeed, to a lawyer, enforcement connotes outside intervention in a private transaction. While Ethereum could build such things as Judges as a Service (JaaS&amp;hellip;? A term, perhaps coined by &lt;a href="https://twitter.com/mids106">Joris Bontje&lt;/a>) which would have outside determinative impact of a smart contract, those systems would not actually do the enforcing. They would predominantly do the interpretation. JaaS &lt;em>will indeed&lt;/em> have a dramatic impact on such an ecosystem, but the main roles which such services would play would be to interpret whether real world events met the metrics established in the proof of work, proof of effort, or proof of XYZ that are contained within the smart contract's algorithm.&lt;/p>
&lt;p>Indeed, we are a way from this:&lt;/p>
&lt;p>This pedantic difference between the term &amp;ldquo;enforcement&amp;rdquo; and the term &amp;ldquo;administration&amp;rdquo; to lawyers is mostly why I prefer the latter to the former. Indeed, it is not only the isolation of the Ethereum blockchain which leads me to prefer the former term, but also it is the very nature of Ethereum. Ethereum contracts pay for computing cycles. Well, technically, the users of the contracts pay, but that nuance is still being worked out. What this means is that there is an incentive to build very small, single-use contracts and then to link those contracts together so that a user only pays for the computing cycles the user need in order to determine some outcome. Why is this even relevant? Because Ethereum will really shine as a business intelligence layer within a value stack of large organizations. It is less interesting to me whether an Ethereum contract and actually move money around than it is for Ethereum systems of contracts to be able to calculate the movement of value within the system based on a complex set of inputs, calculations, and outputs.&lt;/p>
&lt;p>Think, for example, of a community based recycling system (which I'm working on a client with to outline how this could work on Ethereum). In such a system, recycled goods would be collected from individual households by individual contractors, brought to a community based &amp;ldquo;collection center&amp;rdquo; where they are resold back into the value chain. All of the individuals involved (whether as contractors who pick up the goods or individuals who give their goods or marketers of the system) have a certain cost to the ecosystem and bring certain benefits. The overall revenue which such a system receives should then be distributed within the ecosystem based on a calculation of the overall cost to the system of individual participants and overall benefit which individual participants bring to the system. Try calculating that in Excel or Sage! But Ethereum smart contracts could do that. If they had knowledge of the overall revenue stream they could perform a complex series of calculations where individual contracts have inputs, actions, and outputs and because these contracts can talk to one another they can &amp;ldquo;act&amp;rdquo; such that everyone within the ecosystem can have transparency for where all of the value is going.&lt;/p>
&lt;p>The key in the above scenario is not exactly moving the money around, it is in producing a ledger and profit-loss sheet for the system. Whether money is performed by a human or a payroll system with an API hook to the accountant contract is largely immaterial to understanding the real &lt;em>value&lt;/em> that self-administering contracts can bring.&lt;/p>
&lt;p>The above presents what I think is a very interesting possibilities and when we talk about Ethereum as being self-enforcing it gets lots of people off on a tangent about pulling computers out of smart cars so they cannot talk to the blockchain rather than thinking through what value the blockchain system could bring. By talking about self-administering contracts we can &amp;ndash; to a certain degree &amp;ndash; avoid this tangent.&lt;/p>
&lt;h2 id="the-relationship-to-the-state">The Relationship to the State&lt;/h2>
&lt;p>This is a long, tough question to answer. And no one will likely get it right for the foreseeable future. How do we strike the right balance between public rights of &lt;em>all&lt;/em> and the private rights of &lt;em>me&lt;/em>? Who knows. We humans have been struggling with that question since we started thinking.&lt;/p>
&lt;p>The other major portion of the questions were focused on the relationship that the Ethereum ecosystem may have to states. One of the most interesting veins of discussion was about whether blockchain technology would be more or less efficient than the state at enforcing contracts.&lt;/p>
&lt;p>This is an important question which I have been considering at length over the course of the most recent weeks. One of the sub-veins of discussion had to do with the links between smart contracts and court enforcement. I was asked this a lot after my last talk at the most recent &lt;a href="http://www.meetup.com/Amsterdam-Ethereum-Meetup/">Amsterdam Ethereum Meetup&lt;/a>. For the time being, I am recommending to clients that if they want &amp;lsquo;real world&amp;rsquo; enforcement for the time being that they should build a normal contract and add the Ethereum contract as an addendum to that normal contract. This would force the court to either enforce &amp;ndash; or ignore &amp;ndash; such a contract but it would have the benefit of having some real world enforcement if such was essential.&lt;/p>
&lt;p>Such a design, admittedly, would not really address the question of efficiency of administration of contracts (by which I mean determining whether specific metrics within a contract have been met in the real world rather than actually taking a house away from someone because someone has determined that it was sold). One of the important points which I wish would have been raised by the law professors is that most contracts that go to court, go to court because there is a question about the meaning of some terms. Contracts which are clear but only need to determine if some event happened or not predominantly settle or are arbitrated. Contracts that go to a court are &amp;ndash; for the most part &amp;ndash; those that are not clearly worded. Ethereum is drastically more efficient that the state with regard to this particular metric. Why?&lt;/p>
&lt;p>Contracts as code mean that contracts cannot be ambiguous as to their meaning. Certainly there can be differences of opinion as to whether a particular metric was satisfied in the real world (What does it mean if I promise to give my best efforts to achieve a certain outcome &amp;ndash; such clauses are popular in employment contracts?). Certainly there could be bugs. Certainly slight differences in code structure can lead to drastically different outcomes (Does shipping you a good to the wrong address mean &amp;ldquo;I shipped it&amp;rdquo;? Yes. Does it mean &amp;ldquo;I shipped it to you&amp;rdquo;? No.). But what contracts as code cannot be is ambiguous. We will always know &amp;ndash; determinatively &amp;ndash; what the outcomes will be (as long as we know what the inputs are). After all it is just code. This addresses what I suspect are a large proportion of contractual disputes that end up on court.&lt;/p>
&lt;p>As to the overall efficiency of the state enforcing contracts, I'm skeptical. One of the questioners raised land property rolls. The argument basically boiled down to &amp;ndash; we have built these systems; therefore they are more efficient. That may be true and this particular moment but it avoids the more interesting question, which is whether in the long run the current systems used by the state to &lt;em>track&lt;/em> property rights (and to be honest this is, ultimately the state's roll unless someone comes to them and tells them that their property rights are being violated &amp;ndash; in which case the state will send its police to a house and kick out the squatters). The State is not going anywhere, and I &amp;ndash; for one &amp;ndash; am not anarchic. The State can bring value to blockchain ecosystems without ending up at a authoritarian dystopia because the State is simply a collection of humans and we humans live in a tension between the devils and angels that sit on all of our shoulders. But setting up blockchain technology in opposition to state systems is wrongheaded. Why couldn't the State use a blockchain system to track property in the short or medium term. It could keep the human (police) element of the enforcement, but blockchain technologies are very powerful, decentralized systems which are cheaper, faster, and more resilient than what the state could actually build (because central points of failure will always be central points of effort for attackers).&lt;/p>
&lt;h2 id="freenet-or-skynet">Freenet or Skynet?&lt;/h2>
&lt;p>Overall, I think Primavera did a quite good job at exploring the possibilities on both sides of this false choice. Indeed, these are not the only two choices and as with most things in live, the likely result will be somewhere between the two.&lt;/p>
&lt;p>We humans are constantly in a struggle between competing ideas, visions, histories, and norms. The very nature of this competition (which underlies our philosophies of democracy, markets, the scientific process, and free speech rights, among many other things) keeps us somewhere in between a utopic and dystopic future. Not to mention the impetus for nearly all of all our greatest art. The tension between these ideals is likely to always exist as long as we humans exist.&lt;/p>
&lt;p>While both of the extremes are interesting on an analytical and strategic level to discuss, discussion of these two ends of a spectrum presents discussants with a false choice. The reality of the development of any system is rarely either of the extremes and usually ends up somewhere betwixt the tween. Ethereum, as with most technology, is a value neutral proposition. It is just code. It can be used for good ends or foul ends, but the code is the code. Like the HoneyBadger, it doesn't give a fuck.&lt;/p>
&lt;p>What Ethereum will allow us to do, and some of the participants and Primavera herself did a good job of exploring, is to explore different normative bases for ideas. How would contracts work if we wanted to code forgiveness? Mercy? I have no idea, but these ideas are worth exploring. As I said in my most recent talk, the possibility of exploring, studying, and utilizing different normative bases for transactions could be exceedingly powerful for us as humans. This is why I'm spending time contributing in my own small way to the Ethereum ecosystem. The possibilities are there, it is up to the humans to figure out what we will do with it.&lt;/p>
&lt;p>Happy Hacking!&lt;/p>
&lt;p>~ # ~&lt;/p></description></item><item><title>Linking Virtual Automatic Contracts to IRL Events</title><link>https://caseykuhlman.com/muniments/2014/2014-03-04-irl-links-with-virtual-automatic-contracts/</link><pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2014/2014-03-04-irl-links-with-virtual-automatic-contracts/</guid><description>&lt;p>&lt;a href="http://wsl.so/NPndmt">&lt;img src="http://farm3.staticflickr.com/2699/4523508379_6f2edb2551_z.jpg" alt="cracks me up that it's hip to buy virtual stuff that looks broken by torley @ flickr">&lt;/a>&lt;/p>
&lt;p>I have been droning on about virtual automatic contracts &lt;a href="http://blog.caseykuhlman.com//entries/2014/on-virtual-currencies.html">for&lt;/a> &lt;a href="http://blog.caseykuhlman.com//entries/2014/structuring-automatic-virtual-contracts.html">a&lt;/a> &lt;a href="http://blog.caseykuhlman.com//entries/2014/the-latent-natural-synergies-between-cryptocurrencies-opendata-development.html">few&lt;/a> &lt;a href="http://blog.caseykuhlman.com//entries/2014/automatic-virtual-contracts-for-humanitarian-relief.html">posts&lt;/a> now.&lt;/p>
&lt;p>By the by, today is a bit of an exciting day because later this evening I will be going to the &lt;a href="http://www.meetup.com/Amsterdam-Ethereum-Meetup/">Ethereum meetup in Amsterdam&lt;/a>. This will be an interesting opportunity for me to speak with others who are interested in exploring the possibilities of virtual automatic contracts generally and also to see specifically some more details as to how Ethereum smart contracts will work. I am particularly interested in how to test and deploy contracts onto the network. For the most part the Ethereum scripting language appears to be relatively straight-forward, but the key thing I'm currently lacking before I really dig deep and start coding out provisions and contract structure templates is how the contracts get from my text editor where I draft what I think they should be to a test environment to make sure they are not throwing any errors I did not want and then into the actual Ethereum network. Understanding how that test and deploy will work is crucial else you will not be able to get your contracts to work within the system. This piece is not necessarily about Ethereum, in the vein of my previous pieces this is more generalized in nature and should apply to other smart contract protocols that are coming online.&lt;/p>
&lt;p>If virtual automatic contracts are going to be even moderately interesting beyond simple financial derivatives of other virtual currencies or products then paradigmatic linkages to real world events must be developed. I have been thinking about this for a while because if &lt;a href="http://watershedlegal.com">Watershed&lt;/a> wants to be able to support the development of DAOs and other smart contract mechanisms &amp;ndash; which is where we are attempting to go over the course of the year &amp;ndash; then the real key to development of any contract which will have more than an academic interest is how to link to the real world. So far, I have come up with three paradigms that I think would to a certain degree work.&lt;/p>
&lt;h2 id="irl-paradigm-linkage-1---data">IRL Paradigm Linkage 1 - Data&lt;/h2>
&lt;p>As I stated in my previous post on open data and development, data which is aggregated by an agency or organization which the parties agrees is neutral and has no incentive to skew the data in either direction could be agreed to by the parties as a provider of machine consumable IRL data which smart contracts can use to make &amp;ldquo;decisions&amp;rdquo; and &amp;ldquo;spend&amp;rdquo; its money appropriately.&lt;/p>
&lt;p>I will steal an example of how this could work from &lt;a href="https://twitter.com/ethereumcharles">Charles Hoskinson&lt;/a> (who for the record is quite eloquent at explaining what Ethereum is up to). Let's say you wanted to develop a crop insurance mechanism. Let's say that you found there was a single causal link between crop returns and rainfall and that for the most part you were not interested in (for whatever reason) insuring against vector or pest crop failure or any other failure. You were only going to insure crops against a lack of rainfall.&lt;/p>
&lt;p>You sell a product whereby at the beginning of the season farmers send via mobile money a certain amount of money (which would be a factor of how much land they were insuring). When the farmer sends the money, from a legal point of view this would constitute the contract offer. This insurance policy would then be verified by some agent that you have in the field to insure, for example, that the farmer actually has the land and has cultivated the crop. After field verification then your firm would respond with an SMS to the farmer that you have accepted his offer of the contract and that the contract is deployed. Once the contract is deployed the humans get out of the way.&lt;/p>
&lt;p>Over the course of the term of the contract, the smart contract would be given permission to speak to a national weather service data feed that aggregates rainfall data in the farmer's area (and presumably other areas as well). Upon the expiry of the contract term (which would likely be structured to be around harvest time), the smart contract would pay out in an inverse relationship to the amount of rain which actually fell and would rely upon the government's national weather service for it to &lt;em>know&lt;/em> what that amount of rainfall was.&lt;/p>
&lt;p>Other real world questions which could be used by virtual automatic contracts by linking to data feeds would include some of the following: did you ship the item(s) &amp;ndash; verified by a UPS feed? Did you build the web site &amp;ndash; verified by a Travis or Jenkins build result? These would be more specific in nature than general data feeds such as weather data but for the most part they could be used in certain situations. For example, where the contracting party that was seeking to outsource some specific portion of a web application or coding project to a contractor built tests for that and wrote the contract such that the coder was paid automatically upon the Travis or Jenkins build passing the specs &amp;ndash; that would work. However, this would not always work. For example, if the contracting party did not have the time or ability to write the specs and was looking to outsource the build of the specs along with the build of the feature then it is unlikely that building a Travis or Jenkins build feed into the virtual automatic contract would be wise.&lt;/p>
&lt;p>Data can be a powerful tool for understanding &lt;em>some&lt;/em> real world events. Primarily data feeds should be used where you need high level, aggregated information which applies generally to a specific group of people (based on age, class, location, profession, etc.) but not to specific people. Also data feeds as IRL linkages for virtual automatic contracts will be important where you also want to tap into a specific type of event but not to specific events. The basic idea of when you would want to build a virtual automatic contract to link to data feeds is when you want to zoom out from the specifics of the people, parties, and events that the contract may interact with. Data obviously won't work if you need to &amp;ldquo;zoom in&amp;rdquo; or if you cannot get at the data (like the amount of potholes that currently exist in Hargeisa&amp;hellip;we are making great strides at getting at data but we still have a long way to go and even in big countries there are still zillions of data feeds which are not fully developed and leverage-able.).&lt;/p>
&lt;h2 id="irl-paradigm-linkage-2---referees">IRL Paradigm Linkage 2 - Referees&lt;/h2>
&lt;p>When you do not have a data feed to rely upon, or when you need to look at the deeper specifics of people or events, then you will need some human involvement in the smart contract. I am hesitating to call these judges or arbitrators because I think the role of these humans would be slightly different in the sense that what this post is about is figuring out whether a real world event occurred or did not occur. It is a bit pedantic to say I don't like the term judges or arbitrators here, but I think that what we are looking at here is different in form and function. Really what we want the referees to look at is providing a binary answer to a relatively simple question which computers cannot answer.&lt;/p>
&lt;p>The questions which a referee could be used would include some of the following. Did you make the web application to the correct style specification? Did the product you shipped meet the quality specifications built into the contract? These things could not easily be determined using data feeds. Did you actually plant the crops in the field that you have sought to insure?&lt;/p>
&lt;p>There are three main considerations which I would recommend drafters build into virtual automatic contracts when utilizing referees to verify IRL events. First, the question which the referee needs to answer should be binary in nature. Second, the question which the referee needs to answer should be verifiable in nature. Third, the question which the referee needs to answer should be objective and party neutral. Let's take a look at each of these.&lt;/p>
&lt;p>First, the question should be binary. Did event Z occur? Yes or no. Sometimes this is tricky to determine and will require specialists to answer (such as does this drug meet the stated chemical specifications or does this widget meet the design specifications from this CAD drawing); sometimes, however, the question will not require specialists to answer. Whether specialists need to be involved or not will depend on the subject matter of the contract. Either way, the question which the referees need to answer should be structured so that it is binary in nature. So the contract should be structured such that the answer is yes or no, not a list or an essay which will be difficult for a computer to parse. Additionally if the question can be structured in a binary way, then experts from any language base could easily be utilized to answer the question (for the most part) and so you would have the entire world upon which to draw referees from.&lt;/p>
&lt;p>Second, the question should be verifiable. Why trust one referee with determining whether an event has occurred when you could trust 3 out of 5 or 51 out of 100 or whatever threshold the parties agreed upon. If the questions could be structured in a way which the task could be uploaded to a microtasking platform such as &lt;a href="https://www.mturk.com/mturk/welcome">Amazon's Mechanical Turk&lt;/a> then you could easily have the questions be verified by multiple referees to ensure that one referee does not either have a bias or simply made a mistake and pressed Yes when they meant No. This would require structuring the terms of the contract in a specific way. For example, to verify that crops were planted, one could require a geotagged photo from a smart phone uploaded to the insurers site. The site could use computers to match the geotag on the photo with property records with the application for the insurance. As long as the geolocation data from those three match (within some allocable error range) then go to the next step of verifying that crops were planted. The photo which has verified its location data could then be sent to the microtasking platform with the question: Were crops planted in this field? If 3 of 5 respondents say that crops were planted there then the insurer would accept the offer from the insuree and the insurance contract would be deployed. It is up to the drafter to work with the parties to build the questions in such a way that they can be verified by multiple referees which will reduce the uncertainty and also the claims of bias by the referees.&lt;/p>
&lt;p>Third, the question should be objective. I see a lot of contracts; mostly I review contracts developed by other parties since for the most part my clients either have global templates or are Somali businesses who are given proposed contracts by larger entities. One of the things that always strikes me about many contracts is how much subjectivity is in contracts. This is fine for some types of contracts (see below) but when it &lt;em>is&lt;/em> possible to reformulate a specific verification to be objective and party neutral that would be advantageous. When I say party neutral I mean to say that whenever possible the parties should not be mentioned and the question which is sent to the referees should be focused on IRL events. So rather than ask the question like, Did party A do X? it would be advantageous to ask the question like, Did Z occur? There could be a difference in X event and Z event from the above two questions, but this will be one of the tricks in very good virtual automatic contracts and not so good virtual automatic contracts.&lt;/p>
&lt;h2 id="irl-paradigm-linkage-3---trust--subjective-verification">IRL Paradigm Linkage 3 - Trust || Subjective Verification&lt;/h2>
&lt;p>One of the overarching factors of the cryptocurrency space is to explicitly disallow trust. However, for many contracts trust is unavoidable. Trust and subjective verification are substantially the same thing. When I order something online I am entering a contract which has trust and subjective verification at its core. I pay the online merchant trusting that they will ship me the item and the online merchant trusts that I will not send it back to me for a stupid reason. We both subjectively verify that the two primary events have occurred (payment, and sending of the proper item).&lt;/p>
&lt;p>Subjective verification and trust have one significant advantage over the above to non-trust related IRL linkages: they are efficient. It will be easy, but for the foreseeable future not an extremely simple engineering feat, to link data feeds with smart contracts or referee networks. However, it will always be easier to build a subjective verification into a contract. Yet, this will require the parties to trust one another.&lt;/p>
&lt;p>Although the cryptocurrency community tends to not &amp;ldquo;like&amp;rdquo; trust so much, as a lawyer there appear to be some advantages to building subjectivity and trust into a contract. In particular, there are advantages when the parties are entering into a long term contract and where the parties &lt;em>want&lt;/em> to be able to trust one another. For example, I would likely build employment contracts for high level individuals with a trust and subjective verification clauses for some portion of the contract and then objective data feeds for other parts of the contract. In these types of contracts the parties want to be able to trust one another. The Board wants to be able to trust its officers and the officers want to be able to trust the Board. The tricky part will be determining what the conditions are which would allow the contract to trigger different clauses that are more objective in nature or would allow for a termination of the contract (which is a subject for a different post I'm working on). Obviously these triggers would be very different depending on the type of virtual automatic contract which the lawyer|coder was building, but it is likely that if you want to have a functional virtual automatic contract with some efficient elements of subjectivity within the contract that you build some triggers which one or both of the parties can utilize to turn to a more objective mechanism for determining whether an event occurred.&lt;/p>
&lt;p>All in all, it will not be simple to link real world events to virtual automatic contracts, but these three mechanisms would provide the basis on which to build. What am I leaving out? Are there other paradigms that you find that could work?&lt;/p>
&lt;p>~ # ~&lt;/p></description></item></channel></rss>