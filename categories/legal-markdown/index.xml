<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>legal markdown on underWater desert Blogging</title><link>https://caseykuhlman.com/categories/legal-markdown/</link><description>Recent content in legal markdown on underWater desert Blogging</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">All Content Licensed CC BY-NC-SA 4.0&lt;/a></copyright><lastBuildDate>Sun, 14 Jul 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://caseykuhlman.com/categories/legal-markdown/index.xml" rel="self" type="application/rss+xml"/><item><title>Recent Updates to Legal Markdown Gem</title><link>https://caseykuhlman.com/muniments/2013-07-14-updates-to-legal-markdown/</link><pubDate>Sun, 14 Jul 2013 00:00:00 +0000</pubDate><guid>https://caseykuhlman.com/muniments/2013-07-14-updates-to-legal-markdown/</guid><description>Had some time this weekend and have dug pretty deep into my legal_markdown gem. Mostly the changes should be transparent to users. Now that I feel that am getting a better handle on Ruby, I wanted to refactor the code quite a bit. There were a couple of motivations for this. First, I wanted to put the code more inline with common rubyisms and software construction methods. Second, I wanted to make the gem more flexible. It was fairly straightforward as previously conceived. There was only one class, no modules, and all the functionality resided in one huge file. Third, speed. Although most lmd files will be quite tiny and any modern computer can parse them and refactor them into md files within milliseconds, faster is always &amp;gt; slower.</description></item><item><title>Sublime Legal Markdown Package Updated</title><link>https://caseykuhlman.com/muniments/2013-04-19-sublime-legal-markdown-package-pandoc-update/</link><pubDate>Fri, 19 Apr 2013 00:00:00 +0000</pubDate><guid>https://caseykuhlman.com/muniments/2013-04-19-sublime-legal-markdown-package-pandoc-update/</guid><description>Finally had a chance to update my legal markdown package for Sublime. The package is built to fill a couple of holes in the system that I use. Click through to see the details.</description></item><item><title>My (Current) Transactional Documents Work Flow</title><link>https://caseykuhlman.com/muniments/2013-03-09-transactional-documents-workflow/</link><pubDate>Sat, 09 Mar 2013 00:00:00 +0000</pubDate><guid>https://caseykuhlman.com/muniments/2013-03-09-transactional-documents-workflow/</guid><description>This is an outline of my basic workflow, as of the date of this article and mostly for posterity's sake. There isn't much to it really, but it greatly depends on if I'm writing a memo or building a contract (my, and probably every other transactional attorney's, most frequent tasks). This post will cover my basic workflow when I'm building contracts.</description></item><item><title>Pandoc for Legal Documents</title><link>https://caseykuhlman.com/muniments/2013-01-24-pandoc-legal-documents/</link><pubDate>Thu, 24 Jan 2013 00:00:00 +0000</pubDate><guid>https://caseykuhlman.com/muniments/2013-01-24-pandoc-legal-documents/</guid><description>Lately, I have been writing a lot in markdown. It is a freeing way to write documents because you focus more on the words than the tools around you in the wordprocessing interface. You pick your favorite environment to write &amp;ndash; for me it is Sublime Text &amp;ndash; and then you write. But, clients and courts do not read Github Flavored Markdown.</description></item></channel></rss>