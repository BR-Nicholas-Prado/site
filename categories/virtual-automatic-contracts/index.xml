<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>underWater desert Blogging</title><link>https://caseykuhlman.com/</link><description>A Site About Resilience and Authoritarianism</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>casey@caseykuhlman.com (Casey Kuhlman)</managingEditor><webMaster>casey@caseykuhlman.com (Casey Kuhlman)</webMaster><copyright>All Content Licensed CC BY-NC-SA 4.0</copyright><lastBuildDate>Wed, 16 Apr 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://caseykuhlman.com/categories/virtual-automatic-contracts/index.xml" rel="self" type="application/rss+xml"/><item><title>What the Esteemed (and Very Smart) Law Professors Missed at the HLS Ethereum Talk</title><link>https://caseykuhlman.com/muniments/2014/2014-04-16-etherum-visits-harvard/</link><pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2014/2014-04-16-etherum-visits-harvard/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Yesterday a &lt;a href="http://cyber.law.harvard.edu/events/luncheon/2014/04/difilippi">very interesting event&lt;/a> happened. And I had the pleasure to listen in. &lt;a href="https://cyber.law.harvard.edu/people/pdefilippi">Primavera De Filippi&lt;/a> talked &lt;a href="https://ethereum.org">Ethereum&lt;/a> at a Berkman luncheon.&lt;/p>
&lt;p>For those who do not know Berkman is a center at Harvard University. For those who do not know Harvard, welcome to earth. Berkman is officially the Berkman Center for Internet and Society. It is a joint research center housed in Harvard's Law School with the following mission:&lt;/p>
&lt;blockquote>
&lt;p>The Berkman Center's mission is to explore and understand cyberspace; to study its development, dynamics, norms, and standards; and to assess the need or lack thereof for laws and sanctions. We are a research center, premised on the observation that what we seek to learn is not already recorded. Our method is to build out into cyberspace, record data as we go, self-study, and share. Our mode is entrepreneurial nonprofit.&lt;/p>
&lt;/blockquote>
&lt;p>For more, see &lt;a href="https://cyber.law.harvard.edu/about">here&lt;/a>.&lt;/p>
&lt;p>Primavera's talk had a lovely title, &lt;code>Ethereum: Freenet or Skynet?&lt;/code> and it really was a bit of an exploration of the ideas underlying this topic. Primavera first popped up on my radar on the Ethereum Skype group a couple of weeks ago, and I have read &lt;a href="http://www.wired.com/2014/03/decentralized-applications-built-bitcoin-great-except-whos-responsible-outcomes/">some&lt;/a> of &lt;a href="http://www.wired.com/2014/01/its-time-to-take-mesh-networks-seriously-and-not-just-for-the-reasons-you-think/">her work&lt;/a> on Wired, which I would highly recommend.&lt;/p>
&lt;p>Her talk involved a quite fair introduction to Ethereum and what the community is trying to build. What was most interesting about listening to the live audio stream of the event was the questions which were asked by the Professors, researchers, and whomever else was in the room. The video of the talk is online and I would definitely encourage anyone within the Ethereum community to take a listen.&lt;/p>
&lt;p>For those who are not familiar with it, Ethereum is a decentralized blockchain network (similar in nature, but distinct from, Bitcoin). Ethereum is touted as a mechanism which allows developers|lawyers to develop and deploy smart contracts which operate autonomously. Officially, there is the Ethereum boilerplate:&lt;/p>
&lt;blockquote>
&lt;p>Ethereum is a platform and a programming language that makes it possible for any developer to build and publish next-generation distributed applications. Ether, Ethereum's internal currency, powers its applications and acts as a &amp;lsquo;token of exchange&amp;rsquo; on the decentralized network. Ethereum can be used to codify, decentralize, secure and trade just about anything: voting, domain names, financial exchanges, crowdfunding, company governance, contracts and agreements of most kind, intellectual property, and even smart property thanks to hardware integration.&lt;/p>
&lt;/blockquote>
&lt;p>I had specific reactions to three of the veins of questioning which were raised during the question section of the discussion.&lt;/p>
&lt;h2 id="enforcement-or-administration">Enforcement or Administration?&lt;/h2>
&lt;p>A great proportion of the questions had to due with enforcement. And most of these questions sort of miss the point. This is exactly why I recommended at my previous talk that the Ethereum community does a slight pivot from the self-enforcing contracts verbiage to self-administering contracts. Enforcement is a term which gets lawyers all aflutter &amp;ndash; and rightly so.&lt;/p>
&lt;p>Ethereum could never really be self-enforcing until its blockchain becomes ubiquitous. Perhaps then it could be actually self-enforcing, but until such a time the limitations of the Ethereum blockchain mean that there is not actually much that Ethereum could do outside the context of the blockchain. Indeed, to a lawyer, enforcement connotes outside intervention in a private transaction. While Ethereum could build such things as Judges as a Service (JaaS&amp;hellip;? A term, perhaps coined by &lt;a href="https://twitter.com/mids106">Joris Bontje&lt;/a>) which would have outside determinative impact of a smart contract, those systems would not actually do the enforcing. They would predominantly do the interpretation. JaaS &lt;em>will indeed&lt;/em> have a dramatic impact on such an ecosystem, but the main roles which such services would play would be to interpret whether real world events met the metrics established in the proof of work, proof of effort, or proof of XYZ that are contained within the smart contract's algorithm.&lt;/p>
&lt;p>Indeed, we are a way from this:&lt;/p>
&lt;p>This pedantic difference between the term &amp;ldquo;enforcement&amp;rdquo; and the term &amp;ldquo;administration&amp;rdquo; to lawyers is mostly why I prefer the latter to the former. Indeed, it is not only the isolation of the Ethereum blockchain which leads me to prefer the former term, but also it is the very nature of Ethereum. Ethereum contracts pay for computing cycles. Well, technically, the users of the contracts pay, but that nuance is still being worked out. What this means is that there is an incentive to build very small, single-use contracts and then to link those contracts together so that a user only pays for the computing cycles the user need in order to determine some outcome. Why is this even relevant? Because Ethereum will really shine as a business intelligence layer within a value stack of large organizations. It is less interesting to me whether an Ethereum contract and actually move money around than it is for Ethereum systems of contracts to be able to calculate the movement of value within the system based on a complex set of inputs, calculations, and outputs.&lt;/p>
&lt;p>Think, for example, of a community based recycling system (which I'm working on a client with to outline how this could work on Ethereum). In such a system, recycled goods would be collected from individual households by individual contractors, brought to a community based &amp;ldquo;collection center&amp;rdquo; where they are resold back into the value chain. All of the individuals involved (whether as contractors who pick up the goods or individuals who give their goods or marketers of the system) have a certain cost to the ecosystem and bring certain benefits. The overall revenue which such a system receives should then be distributed within the ecosystem based on a calculation of the overall cost to the system of individual participants and overall benefit which individual participants bring to the system. Try calculating that in Excel or Sage! But Ethereum smart contracts could do that. If they had knowledge of the overall revenue stream they could perform a complex series of calculations where individual contracts have inputs, actions, and outputs and because these contracts can talk to one another they can &amp;ldquo;act&amp;rdquo; such that everyone within the ecosystem can have transparency for where all of the value is going.&lt;/p>
&lt;p>The key in the above scenario is not exactly moving the money around, it is in producing a ledger and profit-loss sheet for the system. Whether money is performed by a human or a payroll system with an API hook to the accountant contract is largely immaterial to understanding the real &lt;em>value&lt;/em> that self-administering contracts can bring.&lt;/p>
&lt;p>The above presents what I think is a very interesting possibilities and when we talk about Ethereum as being self-enforcing it gets lots of people off on a tangent about pulling computers out of smart cars so they cannot talk to the blockchain rather than thinking through what value the blockchain system could bring. By talking about self-administering contracts we can &amp;ndash; to a certain degree &amp;ndash; avoid this tangent.&lt;/p>
&lt;h2 id="the-relationship-to-the-state">The Relationship to the State&lt;/h2>
&lt;p>This is a long, tough question to answer. And no one will likely get it right for the foreseeable future. How do we strike the right balance between public rights of &lt;em>all&lt;/em> and the private rights of &lt;em>me&lt;/em>? Who knows. We humans have been struggling with that question since we started thinking.&lt;/p>
&lt;p>The other major portion of the questions were focused on the relationship that the Ethereum ecosystem may have to states. One of the most interesting veins of discussion was about whether blockchain technology would be more or less efficient than the state at enforcing contracts.&lt;/p>
&lt;p>This is an important question which I have been considering at length over the course of the most recent weeks. One of the sub-veins of discussion had to do with the links between smart contracts and court enforcement. I was asked this a lot after my last talk at the most recent &lt;a href="http://www.meetup.com/Amsterdam-Ethereum-Meetup/">Amsterdam Ethereum Meetup&lt;/a>. For the time being, I am recommending to clients that if they want &amp;lsquo;real world&amp;rsquo; enforcement for the time being that they should build a normal contract and add the Ethereum contract as an addendum to that normal contract. This would force the court to either enforce &amp;ndash; or ignore &amp;ndash; such a contract but it would have the benefit of having some real world enforcement if such was essential.&lt;/p>
&lt;p>Such a design, admittedly, would not really address the question of efficiency of administration of contracts (by which I mean determining whether specific metrics within a contract have been met in the real world rather than actually taking a house away from someone because someone has determined that it was sold). One of the important points which I wish would have been raised by the law professors is that most contracts that go to court, go to court because there is a question about the meaning of some terms. Contracts which are clear but only need to determine if some event happened or not predominantly settle or are arbitrated. Contracts that go to a court are &amp;ndash; for the most part &amp;ndash; those that are not clearly worded. Ethereum is drastically more efficient that the state with regard to this particular metric. Why?&lt;/p>
&lt;p>Contracts as code mean that contracts cannot be ambiguous as to their meaning. Certainly there can be differences of opinion as to whether a particular metric was satisfied in the real world (What does it mean if I promise to give my best efforts to achieve a certain outcome &amp;ndash; such clauses are popular in employment contracts?). Certainly there could be bugs. Certainly slight differences in code structure can lead to drastically different outcomes (Does shipping you a good to the wrong address mean &amp;ldquo;I shipped it&amp;rdquo;? Yes. Does it mean &amp;ldquo;I shipped it to you&amp;rdquo;? No.). But what contracts as code cannot be is ambiguous. We will always know &amp;ndash; determinatively &amp;ndash; what the outcomes will be (as long as we know what the inputs are). After all it is just code. This addresses what I suspect are a large proportion of contractual disputes that end up on court.&lt;/p>
&lt;p>As to the overall efficiency of the state enforcing contracts, I'm skeptical. One of the questioners raised land property rolls. The argument basically boiled down to &amp;ndash; we have built these systems; therefore they are more efficient. That may be true and this particular moment but it avoids the more interesting question, which is whether in the long run the current systems used by the state to &lt;em>track&lt;/em> property rights (and to be honest this is, ultimately the state's roll unless someone comes to them and tells them that their property rights are being violated &amp;ndash; in which case the state will send its police to a house and kick out the squatters). The State is not going anywhere, and I &amp;ndash; for one &amp;ndash; am not anarchic. The State can bring value to blockchain ecosystems without ending up at a authoritarian dystopia because the State is simply a collection of humans and we humans live in a tension between the devils and angels that sit on all of our shoulders. But setting up blockchain technology in opposition to state systems is wrongheaded. Why couldn't the State use a blockchain system to track property in the short or medium term. It could keep the human (police) element of the enforcement, but blockchain technologies are very powerful, decentralized systems which are cheaper, faster, and more resilient than what the state could actually build (because central points of failure will always be central points of effort for attackers).&lt;/p>
&lt;h2 id="freenet-or-skynet">Freenet or Skynet?&lt;/h2>
&lt;p>Overall, I think Primavera did a quite good job at exploring the possibilities on both sides of this false choice. Indeed, these are not the only two choices and as with most things in live, the likely result will be somewhere between the two.&lt;/p>
&lt;p>We humans are constantly in a struggle between competing ideas, visions, histories, and norms. The very nature of this competition (which underlies our philosophies of democracy, markets, the scientific process, and free speech rights, among many other things) keeps us somewhere in between a utopic and dystopic future. Not to mention the impetus for nearly all of all our greatest art. The tension between these ideals is likely to always exist as long as we humans exist.&lt;/p>
&lt;p>While both of the extremes are interesting on an analytical and strategic level to discuss, discussion of these two ends of a spectrum presents discussants with a false choice. The reality of the development of any system is rarely either of the extremes and usually ends up somewhere betwixt the tween. Ethereum, as with most technology, is a value neutral proposition. It is just code. It can be used for good ends or foul ends, but the code is the code. Like the HoneyBadger, it doesn't give a fuck.&lt;/p>
&lt;p>What Ethereum will allow us to do, and some of the participants and Primavera herself did a good job of exploring, is to explore different normative bases for ideas. How would contracts work if we wanted to code forgiveness? Mercy? I have no idea, but these ideas are worth exploring. As I said in my most recent talk, the possibility of exploring, studying, and utilizing different normative bases for transactions could be exceedingly powerful for us as humans. This is why I'm spending time contributing in my own small way to the Ethereum ecosystem. The possibilities are there, it is up to the humans to figure out what we will do with it.&lt;/p>
&lt;p>Happy Hacking!&lt;/p>
&lt;p>~ # ~&lt;/p></description></item><item><title>Iterating over the Traditional - Legal Approaches to Smart Contract Development</title><link>https://caseykuhlman.com/muniments/2014/2014-04-09-notes-from-my-ethereum-talk/</link><pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2014/2014-04-09-notes-from-my-ethereum-talk/</guid><description>&lt;h2 id="audio-talk-is-here">Audio Talk is Here&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/wnFqOfR5a7I" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h3 id="who-am-i">Who am I?&lt;/h3>
&lt;p>My name is Casey Kuhlman and I'm an American lawyer. Currently, I'm running a small law firm with our headquarters in Somalia. In particular, we work mainly in the north of Somalia which is a self-declared independent state of Somaliland. I've been in Somaliland for coming up on six years now and my practice has a wide focus on law building, corporate governance work, compliance work, and corporate transactions. For the past few years I have spent most of my time building, reviewing, negotiating, and amending contracts for clients which range from international organizations to international NGOs to international companies all the way down to individuals. I live in Somaliland for some of the year and I live here in Holland for some of the year because my wife is also a lawyer and she works down at the International Criminal Court in the Hague. At this point, part of our business is continuing in the Somali region and another portion of our business is starting to work with clients in the blockchain sector to develop systems of contracts and the like.&lt;/p>
&lt;p>I first became interested in blockchain technology last summer when the main money transmitter company in the Somali region faced a threat that their bank account in the UK with Barclays was going to be closed due to compliance concerns within Barclays. If that company would have closed its operations, that would have drastically affected our business. We have an incorporated entity in the US which allows us to receive wire transfers to our US bank account and then we transmit those to our headquarters in Somaliland via this money transfer company so that we can pay our operating expenses. That concern led me to some of the thought documents about the (currently latent) power of blockchain technology to reduce remittance expenses. Over time, it was probably inevitable that when Ethereum started percolating through the community that I would become interested.&lt;/p>
&lt;h3 id="what-is-this-talk-about">What is this talk about?&lt;/h3>
&lt;p>What I'm here to talk about today is how Ethereum looks from the eyes of one lawyer who works in a place which many would say has an immature rule of law. I would not necessarily say that, but it has been said by others many times that the Somali region is a libertarian's paradise.&lt;/p>
&lt;p>It seems to me that it should be a testament to the power of the Ethereum idea at how much community involvement there has been in this idea. That is utterly fantastic. However, within any community there must be a balance of different perspectives. To date, it seems from my persective that we have a great amount of developer interest in Ethereum. Indeed, how many here tonight would identify as developers? And how many would identify as lawyers? And how many would identify as both? That is more or less what I expected after reviewing the RSVP list on the meetup site. So this talk is meant to somewhat balance the perspectives and provide one lawyer's perspective.&lt;/p>
&lt;h3 id="the-barebones-of-it-all">The BareBones of It All.&lt;/h3>
&lt;p>One of the things which I like best about living in a developing country is that it strips away most of the superficial layers in the systems which run our modern world. I have had the chance to learn about environmental interference with microwave transmission of internet data because when our internet goes down I want to know why. I have learned about supply line resiliency when I buy a gas cooker but the ship bringing a year's supply of gas sinks in the harbor because it hasn't been dredged in however many years.&lt;/p>
&lt;p>All these systems which we take for granted in more developed countries, systems which just work, we do not often have a reason to learn about them. But in developing countries when there is a shock to a system which that system is not resilient to, then you have to learn about the system when you have to cook with deforesting charcoal instead of efficient gas.&lt;/p>
&lt;p>The same thing has applied to my law practice. I am forced in my daily practice to strip back all of the superficial layers of the legal systems which I originally learned about and dig into the mechanics of the system to find what works and what does not.&lt;/p>
&lt;p>So in this talk, I have tried to distill out three rules which I always think through (maybe not always consciously) when I am building, reviewing, or negotiating contracts. Along the way I'm hoping to be able to point out why I am very excited for the future of blockchain technology, and especially the smart contracts ecosystem which the Ethereum community is building.&lt;/p>
&lt;h2 id="rule-1-use-your-funnels">Rule 1: Use Your Funnels&lt;/h2>
&lt;p>Developers understand stacks, so let us start with a stack in the software engineering sense of that word. In a stack you have:&lt;/p>
&lt;ul>
&lt;li>software that moves around memory references and does other fundamental things very close to a processor's core;&lt;/li>
&lt;li>software higher up in the stack that makes information so that it can be added, modified, and changed;&lt;/li>
&lt;li>and software higher up in the stack still that makes things look pretty.&lt;/li>
&lt;/ul>
&lt;p>Developers work on different portions of the stack at different times in order to accomplish different things.&lt;/p>
&lt;p>In law we also have a stack, but I think it is better to think in terms of a funnel than a stack. In a legal funnel you have:&lt;/p>
&lt;ul>
&lt;li>things which prohibit certain actions&lt;/li>
&lt;li>things which compel certain actions&lt;/li>
&lt;/ul>
&lt;p>If we were to plot these &amp;ldquo;things&amp;rdquo; as a measure of the AMOUNT of actions they can PROHIBIT or COMPEL against the SPECIFICITY of those actions then we would build a graph that looks like this:&lt;/p>
&lt;p>When we think about building a contract we have to internally build this funnel for ourselves. Part of this funnel, the part I call the COMPLIANCE FUNNEL is out of our control as the parties to an individual contract. Those things are required by living or operating in a certain geographical jurisdiction and|or by operating in a particular sector. The rest of this funnel, the part I call the CONTRACTING FUNNEL is in our control.&lt;/p>
&lt;p>The proportion of the entire funnel which is a compliance funnel and which is a contracting funnel will differ based on time, geography, and subject matter.&lt;/p>
&lt;h3 id="why-funnels-help">Why Funnels Help?&lt;/h3>
&lt;p>These funnels help us build contracts because they allow us to write fewer words. Think through in your favorite programming language the first time that someone coded a web server for that language. Unless it is an ultramodern language which had web services in a 0.0.1 release, it is likely that the first time a webserver was built in the language that it contained a huge amount of code. And the second time it was built it was able to use some functionality from some sort of a standard library. And the third time it was built it was able to use some functionality from a low level, third-party library built on top of the standard library. And eventually we have a situation where frameworks, low level, and standard libraries all work together so that I can say:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">require &lt;span style="color:#e6db74">&amp;#39;sinatra&amp;#39;&lt;/span>
require &lt;span style="color:#e6db74">&amp;#39;haml&amp;#39;&lt;/span>
get &lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
haml &lt;span style="color:#e6db74">:index&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For those that do not know, this is a very simple web application using Ruby's Sinatra framework. Underneath these five lines of code are an entire framework of code, from Sinatra, from other third party libraries, and from Ruby's Standard Library that allow me to have a web application in five lines of code.&lt;/p>
&lt;p>Funnels are like that. They allow us lawyers to develop contracts with less &amp;ldquo;code&amp;rdquo; than if we needed to code the entire stack. The first person who &amp;ldquo;coded&amp;rdquo; an employment contract had to build out tons of if|then statements into the contract. Over time, as employment laws and commercial norms develop those two areas can reduce the length and complexity of any individual contract because that individual contract is able to rely upon the standards from the law and commercial norms just as a Sinatra application relies on the stack developed by the framework.&lt;/p>
&lt;h3 id="why-is-this-important-for-ethereum">Why is This Important for Ethereum?&lt;/h3>
&lt;p>The first thing I want to point out is that while many lawyers and clients tend to want to &amp;ldquo;avoid&amp;rdquo; laws, they do provide a valid function &amp;ndash; just as frameworks do in the coding world. This function simplifies the nature of specific contract building greatly. Ethereum gives us a chance to re-envision our commercial relationship with &amp;ldquo;the law&amp;rdquo;. In a way which is not currently possible in the &amp;ldquo;real world&amp;rdquo;.&lt;/p>
&lt;p>The second thing I want to point out is that Ethereum gives us an opportunity to develop, test, and perfect different ideas of how contracts and relationships (which I'm going to talk a bit more about in a minute) should work. If I want to develop a dynamic web application I have a vast array of choices. Do I want to do it in: Node, Ruby, Python, PHP, .Net? Do I want to do it in Express, Sinatra, Twisted, Wordpress, Drupal, or some other framework? All of these choices are there and available for me to use. They all have their proclivities, predilictions, advantages, and disadvantages. I choose which is best for me, program on top of it and try to use its advantages while minimizing its disadvantages. I see Ethereum playing out in a similar way where different legal ideas, norms, and contractual structures are held either off the blockchain in open source repositories or on the blockchain.&lt;/p>
&lt;p>The third thing I want to point out is that in order for Ethereum to be able to leverage frameworks, contracts on the blockchain will need to be able to operate together in a fundamental way while contracts residing off the blockchain in open source repositories can have their own way of interacting with each other. So when we think through what should be on the blockchain or off the blockchain in repositories it is important to think through this. It is like the difference between referencing a Google hosted jQuery library where I only need to specify a particular version and using a node library which I will need to connect to an API and perhaps another point.&lt;/p>
&lt;h2 id="rule-2-keep-contracts-social">Rule 2: Keep Contracts Social&lt;/h2>
&lt;p>At their core contracts are a set of rules that provide for an interaction between different entities with divergent goals, capabilities, and resources. Building contracts, as with coding, is both an art and a science. The science part of contracting is largely making sure that for this particular instance that the funnel is properly aligned and the contract is built so that the funnel is workable. The social side of contracting is predominantly where the art comes into play.&lt;/p>
&lt;p>As I said, I work in Somalia and Somaliland much of the time. There we have a predominance of oral agreements. I am not a fan of oral agreements, but I have come to respect their cost effective nature. The reason that I have a problem with oral agreements is that they suffer from a memory bias and are not precise.&lt;/p>
&lt;p>Written contracts, on the other hand are a way to balance precision against many other concerns which exist within complex social systems. Written contracts give us an ability to have both precision and individuality in the face of complexity. This is a powerful idea when you think about it.&lt;/p>
&lt;p>One of the challenges for contract developers in the traditional contract development space is how do we work through the interests and incentives of the parties to craft a contract which is designed to succeed while also providing our clients with appropriate safeguards in cases where it does not succeed.&lt;/p>
&lt;p>Most contracts, most of the time, are not breached. And those that are breached are often breached in a way which does not require a court to enforce. It is only a minuscule amount of contracts which have to go to court in order to be enforced.&lt;/p>
&lt;p>Why? Well, I suspect that for most people most of the time, that when they agree to do something they will follow through on that or will be prepared to face the consequences for not following through on that promise. We are social creatures and it makes sense in a social construct that our promises will be vital for our future ability to conduct whatever activities we want to conduct.&lt;/p>
&lt;p>Because of our nature inclination to think that we will follow through on our promises, we tend to not even want to have specific breach clauses in our contracts. In my own practice, when I ask people why they have gone into a multimillion dollar business with only an oral agreement this is what I'm often told. That trust is so vital to the daily workings of the business and demanding or requesting a written contract at the beginning would start the venture off on the wrong foot. My clients who work in the more developed world understand that trust is all well and good but it is also good to work through the process of building a written contract for the venture.&lt;/p>
&lt;p>This topic is one area in which I may differ from many in who are also into blockchain technology because I feel that trust between individual humans is something to be lauded not to be avoided. While I understand fully the reasoning behind the trust-less movement, I think that organizations work best when there are trust-less backstops in combination with trust between individual actors within the organization. I agree with those who advocate for less trust within the system that having tension within the system is good because it forces the system to be adapted to diverse parties. However, I feel that tension within the system can easily become friction within the system if the contract is not properly designed.&lt;/p>
&lt;p>In my opinion, this is one of the most difficult areas which the Ethereum community will need to work out. My main concerns with respect to keeping contracts social if they live on the blockchain are:&lt;/p>
&lt;p>Verifying offer and acceptance should be integral to the process. As I understand it right now, contracts seem to be deployable to the blockchain based on only one party. That is a unilateral agreement, which is fine, but it is something that we should look at carefully because unilateral agreements have difficulties. Unilateral agreements can work, but they do not work as well as contracts which are bilateral or multilateral agreements between entities &amp;ndash; each of which maintaining its own position. Certainly Ethereum contracts can be designed as multilateral contracts, but the default setting of Ethereum contracts &amp;ndash; at this point &amp;ndash; is essentially unilateral. If the blockchain defaulted to multisignature deployment and allowed single signatory deployment of contracts to the blockchain, I would be much more comfortable than the current situation. From a legal point of view this will be difficult in the real world which mostly requires affirmative showing of both an offer and acceptance in order to have a valid contract. In the real world we do this by drafting, reviewing, and signing contracts. But, the contracts that I've seen on Ethereum are not currently designed in this way. In my opinion this is an area which should be a core part of the protocol rather than left to contract designers because it is utterly fundamental.&lt;/p>
&lt;p>On the other side of the coin, Ethereum will allow us as a community to design different interactivity points which can provide a trust-less base but also develop trust by the community involved in the contract. For example, the concepts of DAO's are likely, if properly conceived and structured, to really build real trust within a community. The automatic administration of contracts which can redistribute value within a network are a way to build trust within the humans in the network because of the automatic way in which smart contracts will work.&lt;/p>
&lt;p>One of the most exciting aspects of Ethereum is that the nature of how contracts are administered (which I prefer over the more difficult word enforce) is most advantageous when there is a simple transfer of value. Since contracts can only live on the blockchain and talk to other contracts on the blockchain and/or transmit value within entities on the blockchain, this constrains how contract designers think through incentives and outcomes. I'm hopeful that by constraining how contracts are administered and by opening up the funnels, that a variety of new incentive structures with different outcomes can be crafted. This could allow for a great expansion of innovation within contracting which is relatively stagnate and where innovation amounts to using word A instead of word B rather than fundamentally looking at incentives, outcomes, and parties to realign interactions between entities in different and interesting ways.&lt;/p>
&lt;h2 id="rule-3-define-the-decision-space">Rule 3: Define the Decision Space&lt;/h2>
&lt;p>This rule is often overlooked by professional contract lawyers, and I think that is to their detriment. This applies to all contracts, but it is more interesting to think about in the terms of multilateral contracts &amp;ndash; in particular organizational governance contracts. What do I mean by decision spaces? I tend to think of organizations in terms of ven diagrams of duties. Each individual node within the organization has particular duties which are unique to that individual node and also most nodes will have duties which are shared with other nodes.&lt;/p>
&lt;p>In traditional contracting these decision spaces are used to define what, for example, a board does vis a vis what the managers do vis a vis what the shareholders do. It works with many other types of contracts as well and I almost always keep this in mind when I'm reviewing or drafting any type of contract.&lt;/p>
&lt;p>This is the area among these three topics where I think that Ethereum will be the most transformative. At this point the decision space concept is not very well defined where it likely should be, for example in employment or consulting contracts. Mostly these contracts have an overview of the decision space allocation between the parties which lacks specifics. In traditional contracts this is needed so that the lawyers to not have to do an amendment to the contract. But in Ethereum changes to decision spaces will likely be nominal. Because contracts can be linked together you can have events &amp;ndash; such as a new department built, or a new hire for a new position, or a change in by laws &amp;ndash; which will be events that can &amp;ldquo;bubble up through the DOM&amp;rdquo; of the organization.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In conclusion, I just wanted to say that although many lawyers get a bad name and that many people have had bad experiences with lawyers that not all of us are jerks. Some lawyers, indeed, are jerks, but Internet Explorer 6 was a jerk of a program. This is important because those of us lawyers who have been doing contracts for a while should be participating in the development of the Ethereum ecosystem by bringing to the table the lessons that we've learned along the way. This has been my entry into that lexicon by laying out three rules which I always try to keep in mind when I'm working with any contract: use your funnels, keep contracts social, and define the decision space.&lt;/p>
&lt;p>Happy Hacking!&lt;/p>
&lt;p>~ # ~&lt;/p></description></item><item><title>A Proposal for @ethereumproject Provisions, Contracts, and Packages</title><link>https://caseykuhlman.com/muniments/2014/2014-03-06-introducing-ethereum-package-manager/</link><pubDate>Thu, 06 Mar 2014 00:00:00 +0000</pubDate><author>casey@caseykuhlman.com (Casey Kuhlman)</author><guid>https://caseykuhlman.com/muniments/2014/2014-03-06-introducing-ethereum-package-manager/</guid><description>&lt;p>Lately on my &amp;ldquo;regular&amp;rdquo; blog I have been doing a decent amount of writing &lt;a href="http://blog.caseykuhlman.com//entries/2014/structuring-automatic-virtual-contracts.html">about&lt;/a> &lt;a href="http://blog.caseykuhlman.com//entries/2014/the-latent-natural-synergies-between-cryptocurrencies-opendata-development.html">virtual&lt;/a> &lt;a href="http://blog.caseykuhlman.com//entries/2014/automatic-virtual-contracts-for-humanitarian-relief.html">automatic&lt;/a> &lt;a href="http://blog.caseykuhlman.com//entries/2014/irl-links-with-virtual-automatic-contracts.html">contracts&lt;/a>. It has been fun to think through the possibilities of virtual automatic contracts and how those could really work in developing countries.&lt;/p>
&lt;h2 id="background-and-introduction">Background and Introduction&lt;/h2>
&lt;p>Earlier this week I had the distinct pleasure of attending the &lt;a href="https://www.ethereum.org/">Ethereum&lt;/a> meetup in Amsterdam to learn more about how virtual automatic contracts (or as they call them smart contracts) work within the Ethereum blockchain. For those that may not know, Ethereum is a derivative of Bitcoin but focused on being a platform for virtual automatic contracts. Although loosely based on Bitcoin's blockchain technology, it is meant as an expansion of that technology into a larger system. Here is how Ethereum describes itself.&lt;/p>
&lt;blockquote>
&lt;p>Ethereum is a platform and a programming language that makes it possible for any developer to build and publish next-generation decentralized applications.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Ethereum can be used to codify, decentralize, secure and trade just about anything: voting, domain names, financial exchanges, crowdfunding, company governance, contracts and agreements of most kind, intellectual property, and even smart property thanks to hardware integration.&lt;/p>
&lt;/blockquote>
&lt;p>The idea is to build a scripting language and combine that with the &amp;ldquo;permanence&amp;rdquo; of blockchain technology and allow &amp;ldquo;contracts&amp;rdquo; within the sandboxed blockchain to take decisions (based on their code) and to interact with other contracts (again based on their code). This combination of a scripting language and blockchain technology opens up an amazing range of possibilities. For now, this technology is very much pre-alpha stage, but there is a LOT of momentum behind it and getting 25 people or so at a meetup in Amsterdam shows they are doing a fabulous amount of PR work to spread the word about what they are doing.&lt;/p>
&lt;p>At the meetup there was a lot of talk about lawyer|coders (or coder|lawyers, not sure which). As I'm pretty sure 99% of the room were mainly coders or financial tech people, the concept of a coder|lawyer was mentioned almost with a laugh in the room (or at least with a sly smile). Well, we are out there. The advantage which coder|lawyers have over either coders or lawyers is that we understand to a large extent how contracts work in the real world but also understanding what computers can do. This gives us a special place within the virtual automatic contracts world. If you are a lawyer and a hacker I would encourage you to read the &lt;a href="https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-White-Paper">Ethereum Whitepaper&lt;/a> and think about participating.&lt;/p>
&lt;h2 id="why-an-ethereum-package-manager">Why an Ethereum Package Manager&lt;/h2>
&lt;p>In any open source ecosystem a range of products to hack on the system needs to be developed. A method of testing applications (or contracts in the Ethereum system) needs to be developed. A method of simulating applications || contracts needs to be developed. A method of compiling applications || contracts needs to be developed. An easy method of deploying applications || contracts needs to be developed. There is a whole range of infrastructure systems which need to be in place for the system to really function.&lt;/p>
&lt;p>One of the most vital aspects of the ecosystem's infrastructure is some sort of a package manager that will assist in pulling packages from other sources and doing other things to assist in the development and deployment of packages.&lt;/p>
&lt;p>Nearly every open source ecosystem I know of has various package managers that automate a lot of different aspects of the ecosystem (depending on what the ecosystem needs, etc.). Ruby has Rubygems and Bundler. Node has NPM. Python has Pip. ZSH has antigen. OSX has Homebrew. VIM has Vundle. Sublime has Sublime Package Manager. You get the idea.&lt;/p>
&lt;p>I have started coding out an Ethereum Package Manager &amp;ndash; &lt;a href="https://github.com/watershedlegal/epm">EPM&lt;/a> &amp;ndash; because I think it will very soon be necessary if anyone is going to build anything more than a simple, isolated contract. One of the things that struck me during the Ethereum meetup this week was that there is going to be a lot of boilerplate redundancy within contracts.&lt;/p>
&lt;p>For example, at the beginning of nearly every contract will be a check to ensure that the contract has enough currency to pay the network for running itself. The way that Ethereum is structured is that contracts need to pay the network for two different things: (1) they pay for the amount of storage they are using, (2) they pay for the number of computing cycles they use. Storage is paid for when the contract deploys onto the network (or when it changes its storage allocation as I understand it). But computing cycles are paid for as they are used. Contracts can hold their own value in credits which are then paid to the network (or other sources depending on the contract's code) on each computing cycle. This means that a contract, if it is running low on funds, does not want to be in a position of executing part of its code and then running low on credit. This will leave the contract in a weird state and generally F up your system. The only part that lawyer|coders need to understand is to build in a small IF statement check at the beginning of the contract to make sure that it does not run unless the contract has enough credits to run the entire script. This is some of the boilerplate that will be required for the Ethereum virtual automatic contracts and nearly every single contract will have this boilerplate.&lt;/p>
&lt;p>Another example will be the self-amendment terms of the contract. Note how I used the lawyer word &amp;ldquo;terms&amp;rdquo; there but one could equally use the coder term &amp;ldquo;settings&amp;rdquo; as I'm referring to the same thing. On a technical level, Ethereum contracts are able to modify their own code. This is equal parts wonderful and utterly terrifying (although the utterly terrifying concern is probably deferred until our contracts get better by an exponential amount). Until we need to worry about sentient bots that can send war drones to kill those that we don't like using the Ethereum blockchain and its IRL connections, we simply need to be worried about the terms under which the contract can amend itself. At times we will want to restrict the contract so that it cannot amend itself full stop. At times we will want to restrict the contract so that only amendments sent via a particular Ethereum address (be that either some master contract &amp;ldquo;above&amp;rdquo; this contract on a hierarchy tree or a human with an Ethereum address) will be actionable. At times we will want to restrict the contract so that only amendments sent via a particular set of Ethereum addresses (usually this would be after some sort of a voting mechanism was executed by those other set of Ethereum nodes) will be actionable. There may be other iterations but it is likely that these are the three main iterations. Again, this is boilerplate and should be written into any contract.&lt;/p>
&lt;p>Lawyers work with boilerplate via Word templates. &lt;a href="https://github.com/rmoc/rmoc.github.io/blob/master/about/index.md">Don't get me&lt;/a> &lt;a href="https://github.com/compleatang/legal-markdown">started on Word&lt;/a>. Coders work with boilerplate via packages or generators. If Ethereum is going to be easy for lawyer|coders to utilize, then we will need some sort of a system which allows us to work with boilerplate. I'm hoping that EPM will be at least one way to do that.&lt;/p>
&lt;h2 id="three-functions-of-ethereum-package-manager">Three Functions of Ethereum Package Manager&lt;/h2>
&lt;p>I've tentatively structured the Ethereum Package Manager to conduct primarily three functions. First, Ethereum Package Manager will serve as an easy way to pull, push, and upgrade your boilerplate. Second, Ethereum Package Manager will simplify your contract development sequence by simplifying the commands to lint, test, simulate, compile, and deploy your contracts. Third, Ethereum Package Manager will provide an (opt out) mechanism for users to support the Ethereum infrastructure with tips. In this sense, EPM is a bit larger than some other package managers in scope.&lt;/p>
&lt;h2 id="package-management-functions">Package Management Functions&lt;/h2>
&lt;p>EPM will allow you to pull, push, and upgrade boilerplate. This will be necessary so that boilerplate provisions can be structured in such a way that the community can achieve consensus on best practices. Also it will simplify the deployment of standardized contracts to the Ethereum blockchain. For example, if a lawyer|coder was tasked with building a decentralized autonomous guild and it needed to pull bounty contracts for some aspects of the guild's operations, then EPM could be used to pull those contracts which best suit the system the lawyer was trying to build. These could be kept in proprietary git repositories or on Github (obviously with a preference for the latter) and pulled into the system in the amounts and with the constants as needed for eventual deployment of the organization.&lt;/p>
&lt;h2 id="package-development-functions">Package Development Functions&lt;/h2>
&lt;p>EPM will provide a simplified way to work with your contracts. After EPM is used to pull in standardized provisions &amp;amp;&amp;amp; || standardized contracts. Then the lawyer|coder will want to edit, lint, test, simulate, and compile those contracts (or system of contracts) before deploying them to the Ethereum blockchain. EPM in combination with other systems will simplify this.&lt;/p>
&lt;h2 id="infrastructure-support-functions">Infrastructure Support Functions&lt;/h2>
&lt;p>The last primary function EPM will provide is a mechanism to support those developing EPM, testing suites, simulators (which are really REPLs I guess), compilers, etc. While it is always great to give to a community, it is even better to be able to do what you love and pay the bills. This is always the difficulty with open source systems and a modest tip mechanism is, I hope, not overly controversial. How it will work is that within the configuration files, EPM will place the addresses of the infrastructure tools it knows you are using along with an equalized percentage of tip across those tools. These can be changed globally or per project and can also be taken out completely if the lawyer|coder cannot afford to send tips or does not agree with the system (hey, I never pay Kiva every time I make a new loan because I'm a freeloader like that.) In the configuration file will be three lines: the address to send the tip to, the percentage of the deployment tip, and the (optional) message to send with the tip. Then when the contract is deployed, the deployer will tell EPM the total amount of tip to be sent to the infrastructure system. EPM will then distribute this based upon the configuration files.&lt;/p>
&lt;h2 id="status-of-epm">Status of EPM&lt;/h2>
&lt;p>This is simply an idea at this point. The TODO includes everything. I am hoping to have some amount of this functionality deployed by the end of next week. In any event, Ethereum is not yet launched and is only working off the testnet so there is still some time.&lt;/p>
&lt;h2 id="ethereum-packages">Ethereum Packages&lt;/h2>
&lt;p>In order for EPM to be most beneficial to the community, the community should agree on certain conventions as to how packages, contracts, and individual contract provisions will be structured. These are my thoughts on the matter, and I welcome all input and thoughts on the matter. For now, I would recommend that EPM be fairly stupid and simply pull in lines of boilerplate, mash those together than then let the human work out any problems that the assembled mass creates. Later, it will be good to have some standardization within the contract provision system so that EPM can be smarter about how it pulls in and combines provisions. It will take a while for the Ethereum ecosystem to reach that point, so for now the conventions I'm proposing below would be fairly rudimentary in nature.&lt;/p>
&lt;h3 id="ethereum-contract-files-xxxxethereum-contract">Ethereum Contract Files: XXXX.ethereum-contract&lt;/h3>
&lt;p>Ethereum contract files should be written in a single language which one of the compilers can parse. There should not be portions of the contract file written in one of the compiler languages and another portion written in another of the compiler languages. Ethereum contract files should be fully composed contracts which can be compiled and deployed with minimal user interaction (perhaps adding some addresses or constants to the script before compilation and deployment). Ethereum contract files should reside in a git repository (for now).&lt;/p>
&lt;h3 id="ethereum-provision-files-xxxxxethereum-provision">Ethereum Provision Files: XXXXX.ethereum-provision&lt;/h3>
&lt;p>Ethereum provision files should be written in a single compiler language, and should reside in a git repository, but need not be fully complete contracts. Indeed, most provisions should not be complete contracts and instead should only provide a single unit of functionality to the contract. EPM will be built so that it can pull various XXXX.ethereum-provision files from various git repos and assemble those into a guess at what the final, assembled contract will look like. For example, if one lawyer|coder writes the definitive contract amount check provision (see above) and puts that on Github then others can instantly pull that provision into the contract.&lt;/p>
&lt;p>Alternatively, I've thought about breaking prefaces and postfaces and substantive provisions out into their own files so that the package manager will know that prefaces go before the substantive provisions and postfaces go after the substantive provisions. However, after reflection it seems that such a system would be more restrictive than what is laid out above and at this point it would be more beneficial to have the system remain neutral as to where lawyer|coders place certain provisions within their contracts.&lt;/p>
&lt;p>The general idea with ethereum-provision files would be to allow people to pull in different types of provisions into a cohesive contract to be edited, tested, and deployed quickly and simply. As the ecosystem develops, I would hope that this will allow the quickest deployment of contracts onto the system for users (predominantly for lawyer|coders who are more the former than the latter).&lt;/p>
&lt;h2 id="ethereum-package-manager-configuration">Ethereum Package Manager Configuration&lt;/h2>
&lt;p>EPM will work based on configuration files and contract definition files. There are two configuration files that any instance of EPM will work with. Residing in &lt;code>~/.epm/config.toml&lt;/code> will be the global configuration file. It will be in TOML format. A local configuration file will also be used only in the context of the current working directory. This is how many package managers operate and it will allow the user to set global defaults as well as per project configuration. The details for the EPM configuration are in the &lt;a href="https://github.com/watershedlegal/epm">README&lt;/a>.&lt;/p>
&lt;p>In addition, in order to define contracts, in the project root will live various XXXXXX.ethereum-definition files (not sure that name will stick and other ideas would be welcome). These will be simple text files and will tell EPM where the contract provisions (or contract) resides that it will pull in and build. Within the contract definition file (which would be somewhat analogous to a Gemfile or your .zshrc or .vimrc file if you were using antigen or vundle) a user will be able to note an entire repository (in which case EPM will pull in all the files in that repository), a single file within a repository, or even a range of lines from a single file within a repository. Since EPM will know where the repository is and since repositories are version controlled, this will allow EPM to update the boilerplate down the road in case certain best practices change, security flaws within contracts are determined, or simply because things have changed.&lt;/p>
&lt;h2 id="questions-feedback-thoughts">Questions, Feedback, Thoughts&lt;/h2>
&lt;p>Feel free to add any comments, questions, or feedback below, or, better, drop an issue on &lt;a href="https://github.com/watershedlegal/epm/issues">Github&lt;/a>. As I said above, I'll be working on this over the coming week and hope to have something moderately useful within a week or two.&lt;/p>
&lt;p>Happy Hacking!&lt;/p>
&lt;p>~ # ~&lt;/p></description></item></channel></rss>